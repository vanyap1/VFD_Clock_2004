
VFD_Clock_2004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00001170  00001204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010f  0080012e  0080012e  000012d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f1f  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1b  00000000  00000000  000034b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001334  00000000  00000000  000042ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  00005604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087d  00000000  00000000  00005b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014f2  00000000  00000000  000063d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  000078c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	50 c1       	rjmp	.+672    	; 0x2b0 <__vector_7>
      10:	45 c1       	rjmp	.+650    	; 0x29c <__vector_8>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	c4 c2       	rjmp	.+1416   	; 0x5a0 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	f8 c2       	rjmp	.+1520   	; 0x60c <__vector_13>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	e6 c1       	rjmp	.+972    	; 0x3f0 <__vector_17>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 e7       	ldi	r30, 0x70	; 112
      3a:	f1 e1       	ldi	r31, 0x11	; 17
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ae 32       	cpi	r26, 0x2E	; 46
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	22 e0       	ldi	r18, 0x02	; 2
      4a:	ae e2       	ldi	r26, 0x2E	; 46
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ad 33       	cpi	r26, 0x3D	; 61
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	34 d4       	rcall	.+2152   	; 0x8c2 <main>
      5a:	88 c8       	rjmp	.-3824   	; 0xfffff16c <__eeprom_end+0xff7ef16c>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <set_pin_level>:
*/


void set_pin_level(gpio *GPIOx , const bool level)
{
	if (level) {
      5e:	66 23       	and	r22, r22
      60:	99 f0       	breq	.+38     	; 0x88 <set_pin_level+0x2a>
		*GPIOx->port |= 1 << GPIOx->pin;
      62:	dc 01       	movw	r26, r24
      64:	ed 91       	ld	r30, X+
      66:	fc 91       	ld	r31, X
      68:	11 97       	sbiw	r26, 0x01	; 1
      6a:	21 e0       	ldi	r18, 0x01	; 1
      6c:	30 e0       	ldi	r19, 0x00	; 0
      6e:	a9 01       	movw	r20, r18
      70:	12 96       	adiw	r26, 0x02	; 2
      72:	0c 90       	ld	r0, X
      74:	02 c0       	rjmp	.+4      	; 0x7a <set_pin_level+0x1c>
      76:	44 0f       	add	r20, r20
      78:	55 1f       	adc	r21, r21
      7a:	0a 94       	dec	r0
      7c:	e2 f7       	brpl	.-8      	; 0x76 <set_pin_level+0x18>
      7e:	ca 01       	movw	r24, r20
      80:	90 81       	ld	r25, Z
      82:	89 2b       	or	r24, r25
      84:	80 83       	st	Z, r24
      86:	08 95       	ret
		} else {
		*GPIOx->port &= ~(1 << GPIOx->pin);
      88:	dc 01       	movw	r26, r24
      8a:	ed 91       	ld	r30, X+
      8c:	fc 91       	ld	r31, X
      8e:	11 97       	sbiw	r26, 0x01	; 1
      90:	21 e0       	ldi	r18, 0x01	; 1
      92:	30 e0       	ldi	r19, 0x00	; 0
      94:	a9 01       	movw	r20, r18
      96:	12 96       	adiw	r26, 0x02	; 2
      98:	0c 90       	ld	r0, X
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <set_pin_level+0x42>
      9c:	44 0f       	add	r20, r20
      9e:	55 1f       	adc	r21, r21
      a0:	0a 94       	dec	r0
      a2:	e2 f7       	brpl	.-8      	; 0x9c <set_pin_level+0x3e>
      a4:	ca 01       	movw	r24, r20
      a6:	80 95       	com	r24
      a8:	90 81       	ld	r25, Z
      aa:	89 23       	and	r24, r25
      ac:	80 83       	st	Z, r24
      ae:	08 95       	ret

000000b0 <set_pin_dir>:
	}
}

void set_pin_dir(gpio *GPIOx, const enum port_dir direction)
{
      b0:	fc 01       	movw	r30, r24
	uint8_t *tmp_port = GPIOx->port-1;
      b2:	30 81       	ld	r19, Z
      b4:	21 81       	ldd	r18, Z+1	; 0x01
	switch (direction) {
      b6:	61 30       	cpi	r22, 0x01	; 1
      b8:	99 f0       	breq	.+38     	; 0xe0 <set_pin_dir+0x30>
      ba:	18 f0       	brcs	.+6      	; 0xc2 <set_pin_dir+0x12>
      bc:	62 30       	cpi	r22, 0x02	; 2
      be:	f1 f0       	breq	.+60     	; 0xfc <set_pin_dir+0x4c>
      c0:	08 95       	ret
		case PORT_DIR_IN:
		*tmp_port &= ~(1 << GPIOx->pin);
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	02 80       	ldd	r0, Z+2	; 0x02
      c8:	02 c0       	rjmp	.+4      	; 0xce <set_pin_dir+0x1e>
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	0a 94       	dec	r0
      d0:	e2 f7       	brpl	.-8      	; 0xca <set_pin_dir+0x1a>
      d2:	e3 2f       	mov	r30, r19
      d4:	f2 2f       	mov	r31, r18
      d6:	80 95       	com	r24
      d8:	92 91       	ld	r25, -Z
      da:	89 23       	and	r24, r25
      dc:	80 83       	st	Z, r24
		break;
      de:	08 95       	ret
		case PORT_DIR_OUT:
		*tmp_port |= 1 << GPIOx->pin;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	02 80       	ldd	r0, Z+2	; 0x02
      e6:	02 c0       	rjmp	.+4      	; 0xec <set_pin_dir+0x3c>
      e8:	88 0f       	add	r24, r24
      ea:	99 1f       	adc	r25, r25
      ec:	0a 94       	dec	r0
      ee:	e2 f7       	brpl	.-8      	; 0xe8 <set_pin_dir+0x38>
      f0:	e3 2f       	mov	r30, r19
      f2:	f2 2f       	mov	r31, r18
      f4:	92 91       	ld	r25, -Z
      f6:	89 2b       	or	r24, r25
      f8:	80 83       	st	Z, r24
		break;
      fa:	08 95       	ret
		case PORT_DIR_OFF:
		*tmp_port &= ~(1 << GPIOx->pin);
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	ac 01       	movw	r20, r24
     102:	02 80       	ldd	r0, Z+2	; 0x02
     104:	02 c0       	rjmp	.+4      	; 0x10a <set_pin_dir+0x5a>
     106:	44 0f       	add	r20, r20
     108:	55 1f       	adc	r21, r21
     10a:	0a 94       	dec	r0
     10c:	e2 f7       	brpl	.-8      	; 0x106 <set_pin_dir+0x56>
     10e:	a3 2f       	mov	r26, r19
     110:	b2 2f       	mov	r27, r18
     112:	40 95       	com	r20
     114:	2e 91       	ld	r18, -X
     116:	42 23       	and	r20, r18
     118:	4c 93       	st	X, r20
		*GPIOx->port &= ~(1 << GPIOx->pin);
     11a:	a0 81       	ld	r26, Z
     11c:	b1 81       	ldd	r27, Z+1	; 0x01
     11e:	02 80       	ldd	r0, Z+2	; 0x02
     120:	02 c0       	rjmp	.+4      	; 0x126 <set_pin_dir+0x76>
     122:	88 0f       	add	r24, r24
     124:	99 1f       	adc	r25, r25
     126:	0a 94       	dec	r0
     128:	e2 f7       	brpl	.-8      	; 0x122 <set_pin_dir+0x72>
     12a:	80 95       	com	r24
     12c:	9c 91       	ld	r25, X
     12e:	89 23       	and	r24, r25
     130:	8c 93       	st	X, r24
     132:	08 95       	ret

00000134 <rtc_int_enable>:
};



void rtc_int_enable(rtc_date *RTCx , const uint16_t int_time){
	rtc_config_3[0] |= (1 << TIE);
     134:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rtc_config_3>
     138:	80 61       	ori	r24, 0x10	; 16
     13a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rtc_config_3>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
     13e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <rtc_config_2>
     142:	81 61       	ori	r24, 0x11	; 17
     144:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rtc_config_2>
	
	twi_write(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
     148:	22 e0       	ldi	r18, 0x02	; 2
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e6       	ldi	r20, 0x60	; 96
     14e:	50 e0       	ldi	r21, 0x00	; 0
     150:	6b e0       	ldi	r22, 0x0B	; 11
     152:	82 e3       	ldi	r24, 0x32	; 50
     154:	c4 d1       	rcall	.+904    	; 0x4de <twi_write>
	twi_write(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
     156:	21 e0       	ldi	r18, 0x01	; 1
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	41 e3       	ldi	r20, 0x31	; 49
     15c:	51 e0       	ldi	r21, 0x01	; 1
     15e:	6d e0       	ldi	r22, 0x0D	; 13
     160:	82 e3       	ldi	r24, 0x32	; 50
     162:	bd d1       	rcall	.+890    	; 0x4de <twi_write>
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
     164:	21 e0       	ldi	r18, 0x01	; 1
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	40 e3       	ldi	r20, 0x30	; 48
     16a:	51 e0       	ldi	r21, 0x01	; 1
     16c:	6f e0       	ldi	r22, 0x0F	; 15
     16e:	82 e3       	ldi	r24, 0x32	; 50
     170:	b6 d1       	rcall	.+876    	; 0x4de <twi_write>
     172:	08 95       	ret

00000174 <BCDtoDEC>:
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
     174:	98 2f       	mov	r25, r24
     176:	92 95       	swap	r25
     178:	9f 70       	andi	r25, 0x0F	; 15
     17a:	99 0f       	add	r25, r25
     17c:	29 2f       	mov	r18, r25
     17e:	22 0f       	add	r18, r18
     180:	22 0f       	add	r18, r18
     182:	92 0f       	add	r25, r18
     184:	8f 70       	andi	r24, 0x0F	; 15
}
     186:	89 0f       	add	r24, r25
     188:	08 95       	ret

0000018a <rtc_sync>:
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
	
	
}

void rtc_sync(rtc_date *RTCx){
     18a:	0f 93       	push	r16
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	27 97       	sbiw	r28, 0x07	; 7
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	f8 94       	cli
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	cd bf       	out	0x3d, r28	; 61
     1a2:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	twi_read(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
     1a4:	27 e0       	ldi	r18, 0x07	; 7
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	ae 01       	movw	r20, r28
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	82 e3       	ldi	r24, 0x32	; 50
     1b2:	2e d1       	rcall	.+604    	; 0x410 <twi_read>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	de df       	rcall	.-68     	; 0x174 <BCDtoDEC>
     1b8:	f8 01       	movw	r30, r16
     1ba:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
     1bc:	8a 81       	ldd	r24, Y+2	; 0x02
     1be:	da df       	rcall	.-76     	; 0x174 <BCDtoDEC>
     1c0:	f8 01       	movw	r30, r16
     1c2:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
     1c4:	8b 81       	ldd	r24, Y+3	; 0x03
     1c6:	d6 df       	rcall	.-84     	; 0x174 <BCDtoDEC>
     1c8:	f8 01       	movw	r30, r16
     1ca:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
     1cc:	8c 81       	ldd	r24, Y+4	; 0x04
     1ce:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
     1d0:	8d 81       	ldd	r24, Y+5	; 0x05
     1d2:	d0 df       	rcall	.-96     	; 0x174 <BCDtoDEC>
     1d4:	f8 01       	movw	r30, r16
     1d6:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
     1d8:	8e 81       	ldd	r24, Y+6	; 0x06
     1da:	cc df       	rcall	.-104    	; 0x174 <BCDtoDEC>
     1dc:	f8 01       	movw	r30, r16
     1de:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6]);
     1e0:	8f 81       	ldd	r24, Y+7	; 0x07
     1e2:	c8 df       	rcall	.-112    	; 0x174 <BCDtoDEC>
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	f8 01       	movw	r30, r16
     1e8:	96 83       	std	Z+6, r25	; 0x06
     1ea:	85 83       	std	Z+5, r24	; 0x05
}
     1ec:	27 96       	adiw	r28, 0x07	; 7
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	1f 91       	pop	r17
     1fe:	0f 91       	pop	r16
     200:	08 95       	ret

00000202 <DECtoBCD>:
}

// BCDtoDEC -- convert decimal to binary-coded decimal (BCD)
uint8_t DECtoBCD(uint8_t val)
{
	return ((val / 10) * 0x10) + (val % 10);
     202:	9d ec       	ldi	r25, 0xCD	; 205
     204:	89 9f       	mul	r24, r25
     206:	91 2d       	mov	r25, r1
     208:	11 24       	eor	r1, r1
     20a:	96 95       	lsr	r25
     20c:	96 95       	lsr	r25
     20e:	96 95       	lsr	r25
     210:	39 2f       	mov	r19, r25
     212:	33 0f       	add	r19, r19
     214:	23 2f       	mov	r18, r19
     216:	22 0f       	add	r18, r18
     218:	22 0f       	add	r18, r18
     21a:	23 0f       	add	r18, r19
     21c:	82 1b       	sub	r24, r18
}
     21e:	20 e1       	ldi	r18, 0x10	; 16
     220:	92 9f       	mul	r25, r18
     222:	80 0d       	add	r24, r0
     224:	11 24       	eor	r1, r1
     226:	08 95       	ret

00000228 <rtc_set>:
	RTCx->dayofweek=rtc_raw[3];
	RTCx->date=BCDtoDEC(rtc_raw[4]);
	RTCx->month=BCDtoDEC(rtc_raw[5]);
	RTCx->year=BCDtoDEC(rtc_raw[6]);
}
void rtc_set(rtc_date *RTCx){
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	27 97       	sbiw	r28, 0x07	; 7
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	rtc_raw[0]=DECtoBCD(RTCx->second);
     242:	fc 01       	movw	r30, r24
     244:	80 81       	ld	r24, Z
     246:	dd df       	rcall	.-70     	; 0x202 <DECtoBCD>
     248:	89 83       	std	Y+1, r24	; 0x01
	rtc_raw[1]=DECtoBCD(RTCx->minute);
     24a:	f8 01       	movw	r30, r16
     24c:	81 81       	ldd	r24, Z+1	; 0x01
     24e:	d9 df       	rcall	.-78     	; 0x202 <DECtoBCD>
     250:	8a 83       	std	Y+2, r24	; 0x02
	rtc_raw[2]=DECtoBCD(RTCx->hour);
     252:	f8 01       	movw	r30, r16
     254:	82 81       	ldd	r24, Z+2	; 0x02
     256:	d5 df       	rcall	.-86     	; 0x202 <DECtoBCD>
     258:	8b 83       	std	Y+3, r24	; 0x03
	rtc_raw[3]=RTCx->dayofweek;
     25a:	f8 01       	movw	r30, r16
     25c:	87 81       	ldd	r24, Z+7	; 0x07
     25e:	8c 83       	std	Y+4, r24	; 0x04
	rtc_raw[4]=DECtoBCD(RTCx->date);
     260:	83 81       	ldd	r24, Z+3	; 0x03
     262:	cf df       	rcall	.-98     	; 0x202 <DECtoBCD>
     264:	8d 83       	std	Y+5, r24	; 0x05
	rtc_raw[5]=DECtoBCD(RTCx->month);
     266:	f8 01       	movw	r30, r16
     268:	84 81       	ldd	r24, Z+4	; 0x04
     26a:	cb df       	rcall	.-106    	; 0x202 <DECtoBCD>
     26c:	8e 83       	std	Y+6, r24	; 0x06
	rtc_raw[6]=DECtoBCD(RTCx->year);
     26e:	f8 01       	movw	r30, r16
     270:	85 81       	ldd	r24, Z+5	; 0x05
     272:	c7 df       	rcall	.-114    	; 0x202 <DECtoBCD>
     274:	8f 83       	std	Y+7, r24	; 0x07
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
     276:	27 e0       	ldi	r18, 0x07	; 7
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	ae 01       	movw	r20, r28
     27c:	4f 5f       	subi	r20, 0xFF	; 255
     27e:	5f 4f       	sbci	r21, 0xFF	; 255
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	82 e3       	ldi	r24, 0x32	; 50
     284:	2c d1       	rcall	.+600    	; 0x4de <twi_write>
}
     286:	27 96       	adiw	r28, 0x07	; 7
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	08 95       	ret

0000029c <__vector_8>:
}

uint8_t timer_status(void){
	return timer_counter;
	//sei();
}
     29c:	1f 92       	push	r1
     29e:	0f 92       	push	r0
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	0f 92       	push	r0
     2a4:	11 24       	eor	r1, r1
     2a6:	0f 90       	pop	r0
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	0f 90       	pop	r0
     2ac:	1f 90       	pop	r1
     2ae:	18 95       	reti

000002b0 <__vector_7>:
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	0f 90       	pop	r0
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	0f 90       	pop	r0
     2c0:	1f 90       	pop	r1
     2c2:	18 95       	reti

000002c4 <timer1_init>:

void timer1_init(uint16_t counter_reg){
	sei();
     2c4:	78 94       	sei
	DDRB = DDRB | (0b1 << PORTB1)|(0b1 << PORTB2);
     2c6:	87 b3       	in	r24, 0x17	; 23
     2c8:	86 60       	ori	r24, 0x06	; 6
     2ca:	87 bb       	out	0x17, r24	; 23
	OCR1A=119;
     2cc:	87 e7       	ldi	r24, 0x77	; 119
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	9b bd       	out	0x2b, r25	; 43
     2d2:	8a bd       	out	0x2a, r24	; 42
	OCR1B=135;
     2d4:	87 e8       	ldi	r24, 0x87	; 135
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	99 bd       	out	0x29, r25	; 41
     2da:	88 bd       	out	0x28, r24	; 40
	TCCR1A =TCCR1A|(0b10 <<COM1A0)|(0b11 <<COM1B0)|(0b01 << WGM10);
     2dc:	8f b5       	in	r24, 0x2f	; 47
     2de:	81 6b       	ori	r24, 0xB1	; 177
     2e0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0b1 << CS10) | (0b00 << WGM12);
     2e2:	8e b5       	in	r24, 0x2e	; 46
     2e4:	81 60       	ori	r24, 0x01	; 1
     2e6:	8e bd       	out	0x2e, r24	; 46
     2e8:	08 95       	ret

000002ea <twi_start>:
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     2ea:	85 ea       	ldi	r24, 0xA5	; 165
     2ec:	86 bf       	out	0x36, r24	; 54
ISR(TWI_vect){
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <twi_start+0x14>
		i++;
     2f4:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     2f6:	80 34       	cpi	r24, 0x40	; 64
     2f8:	26 e0       	ldi	r18, 0x06	; 6
     2fa:	92 07       	cpc	r25, r18
     2fc:	30 f4       	brcc	.+12     	; 0x30a <twi_start+0x20>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     2fe:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     302:	28 30       	cpi	r18, 0x08	; 8
     304:	b9 f7       	brne	.-18     	; 0x2f4 <twi_start+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     30a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     30c:	08 95       	ret

0000030e <twi_stop>:

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     30e:	85 e9       	ldi	r24, 0x95	; 149
     310:	86 bf       	out	0x36, r24	; 54
     312:	08 95       	ret

00000314 <twi_restart>:
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     314:	85 ea       	ldi	r24, 0xA5	; 165
     316:	86 bf       	out	0x36, r24	; 54
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     31c:	05 c0       	rjmp	.+10     	; 0x328 <twi_restart+0x14>
		i++;
     31e:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     320:	80 34       	cpi	r24, 0x40	; 64
     322:	26 e0       	ldi	r18, 0x06	; 6
     324:	92 07       	cpc	r25, r18
     326:	30 f4       	brcc	.+12     	; 0x334 <twi_restart+0x20>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     328:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     32c:	20 31       	cpi	r18, 0x10	; 16
     32e:	b9 f7       	brne	.-18     	; 0x31e <twi_restart+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     334:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     336:	08 95       	ret

00000338 <twi_addr_write_ack>:

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     338:	85 e8       	ldi	r24, 0x85	; 133
     33a:	86 bf       	out	0x36, r24	; 54
	}
	return TWI_OK;
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     340:	05 c0       	rjmp	.+10     	; 0x34c <twi_addr_write_ack+0x14>
		i++;
     342:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     344:	80 34       	cpi	r24, 0x40	; 64
     346:	26 e0       	ldi	r18, 0x06	; 6
     348:	92 07       	cpc	r25, r18
     34a:	30 f4       	brcc	.+12     	; 0x358 <twi_addr_write_ack+0x20>
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     34c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     350:	28 31       	cpi	r18, 0x18	; 24
     352:	b9 f7       	brne	.-18     	; 0x342 <twi_addr_write_ack+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	08 95       	ret
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     358:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     35a:	08 95       	ret

0000035c <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     35c:	85 e8       	ldi	r24, 0x85	; 133
     35e:	86 bf       	out	0x36, r24	; 54
	return TWI_OK;
}


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     364:	05 c0       	rjmp	.+10     	; 0x370 <twi_data_write_ack+0x14>
		i++;
     366:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     368:	80 34       	cpi	r24, 0x40	; 64
     36a:	26 e0       	ldi	r18, 0x06	; 6
     36c:	92 07       	cpc	r25, r18
     36e:	30 f4       	brcc	.+12     	; 0x37c <twi_data_write_ack+0x20>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     370:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     374:	28 32       	cpi	r18, 0x28	; 40
     376:	b9 f7       	brne	.-18     	; 0x366 <twi_data_write_ack+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	08 95       	ret
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     37c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     37e:	08 95       	ret

00000380 <twi_addr_read_ack>:


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     380:	85 e8       	ldi	r24, 0x85	; 133
     382:	86 bf       	out	0x36, r24	; 54
	return TWI_OK;
}


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     388:	05 c0       	rjmp	.+10     	; 0x394 <twi_addr_read_ack+0x14>
		i++;
     38a:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     38c:	80 34       	cpi	r24, 0x40	; 64
     38e:	26 e0       	ldi	r18, 0x06	; 6
     390:	92 07       	cpc	r25, r18
     392:	30 f4       	brcc	.+12     	; 0x3a0 <twi_addr_read_ack+0x20>


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     394:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     398:	20 34       	cpi	r18, 0x40	; 64
     39a:	b9 f7       	brne	.-18     	; 0x38a <twi_addr_read_ack+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	08 95       	ret
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     3a2:	08 95       	ret

000003a4 <twi_data_read_ack>:


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
     3a4:	88 23       	and	r24, r24
     3a6:	81 f0       	breq	.+32     	; 0x3c8 <twi_data_read_ack+0x24>
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     3a8:	85 ec       	ldi	r24, 0xC5	; 197
     3aa:	86 bf       	out	0x36, r24	; 54
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <twi_data_read_ack+0x18>
			i++;
     3b2:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     3b4:	80 34       	cpi	r24, 0x40	; 64
     3b6:	26 e0       	ldi	r18, 0x06	; 6
     3b8:	92 07       	cpc	r25, r18
     3ba:	b0 f4       	brcc	.+44     	; 0x3e8 <twi_data_read_ack+0x44>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     3bc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     3c0:	20 35       	cpi	r18, 0x50	; 80
     3c2:	b9 f7       	brne	.-18     	; 0x3b2 <twi_data_read_ack+0xe>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	08 95       	ret
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     3c8:	85 e8       	ldi	r24, 0x85	; 133
     3ca:	86 bf       	out	0x36, r24	; 54
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <twi_data_read_ack+0x38>
			i++;
     3d2:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     3d4:	80 34       	cpi	r24, 0x40	; 64
     3d6:	26 e0       	ldi	r18, 0x06	; 6
     3d8:	92 07       	cpc	r25, r18
     3da:	40 f4       	brcc	.+16     	; 0x3ec <twi_data_read_ack+0x48>
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     3dc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     3e0:	28 35       	cpi	r18, 0x58	; 88
     3e2:	b9 f7       	brne	.-18     	; 0x3d2 <twi_data_read_ack+0x2e>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	08 95       	ret
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	08 95       	ret
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		
	}
	return TWI_OK;
}
     3ee:	08 95       	ret

000003f0 <__vector_17>:

#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI_vect){
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	8f 93       	push	r24
	status = (TWSR & 0xF8);
     3fc:	81 b1       	in	r24, 0x01	; 1
     3fe:	88 7f       	andi	r24, 0xF8	; 248
     400:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <status>
}
     404:	8f 91       	pop	r24
     406:	0f 90       	pop	r0
     408:	0f be       	out	0x3f, r0	; 63
     40a:	0f 90       	pop	r0
     40c:	1f 90       	pop	r1
     40e:	18 95       	reti

00000410 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	d8 2e       	mov	r13, r24
     420:	c6 2e       	mov	r12, r22
     422:	7a 01       	movw	r14, r20
     424:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     426:	61 df       	rcall	.-318    	; 0x2ea <twi_start>
     428:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     42a:	88 23       	and	r24, r24
     42c:	19 f0       	breq	.+6      	; 0x434 <twi_read+0x24>
		twi_stop();
     42e:	6f df       	rcall	.-290    	; 0x30e <twi_stop>
		return err;
     430:	8c 2f       	mov	r24, r28
     432:	4d c0       	rjmp	.+154    	; 0x4ce <__stack+0x6f>
	}
	TWDR = (addr << 1) | 0;
     434:	8d 2d       	mov	r24, r13
     436:	88 0f       	add	r24, r24
     438:	83 b9       	out	0x03, r24	; 3
	
	
	err = twi_addr_write_ack();
     43a:	7e df       	rcall	.-260    	; 0x338 <twi_addr_write_ack>
     43c:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     43e:	88 23       	and	r24, r24
     440:	19 f0       	breq	.+6      	; 0x448 <twi_read+0x38>
		twi_stop();
     442:	65 df       	rcall	.-310    	; 0x30e <twi_stop>
		return err;
     444:	8c 2f       	mov	r24, r28
     446:	43 c0       	rjmp	.+134    	; 0x4ce <__stack+0x6f>
	}
	
	TWDR = reg;
     448:	c3 b8       	out	0x03, r12	; 3
	err = twi_data_write_ack();
     44a:	88 df       	rcall	.-240    	; 0x35c <twi_data_write_ack>
     44c:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     44e:	88 23       	and	r24, r24
     450:	19 f0       	breq	.+6      	; 0x458 <twi_read+0x48>
		twi_stop();
     452:	5d df       	rcall	.-326    	; 0x30e <twi_stop>
		return err;
     454:	8c 2f       	mov	r24, r28
     456:	3b c0       	rjmp	.+118    	; 0x4ce <__stack+0x6f>
	}
	
	err = twi_restart();
     458:	5d df       	rcall	.-326    	; 0x314 <twi_restart>
     45a:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     45c:	88 23       	and	r24, r24
     45e:	19 f0       	breq	.+6      	; 0x466 <__stack+0x7>
		twi_stop();
     460:	56 df       	rcall	.-340    	; 0x30e <twi_stop>
		return err;
     462:	8c 2f       	mov	r24, r28
     464:	34 c0       	rjmp	.+104    	; 0x4ce <__stack+0x6f>
	}
	
	TWDR = (addr << 1) | 1;
     466:	8d 2d       	mov	r24, r13
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	81 60       	ori	r24, 0x01	; 1
     470:	83 b9       	out	0x03, r24	; 3

	err = twi_addr_read_ack();
     472:	86 df       	rcall	.-244    	; 0x380 <twi_addr_read_ack>
     474:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     476:	88 23       	and	r24, r24
     478:	a1 f0       	breq	.+40     	; 0x4a2 <__stack+0x43>
		twi_stop();
     47a:	49 df       	rcall	.-366    	; 0x30e <twi_stop>
		return err;
     47c:	8c 2f       	mov	r24, r28
     47e:	27 c0       	rjmp	.+78     	; 0x4ce <__stack+0x6f>
	}
	
	for(i = 0; i < (len - 1);i++){
		err = twi_data_read_ack(1);
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	90 df       	rcall	.-224    	; 0x3a4 <twi_data_read_ack>
     484:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     486:	88 23       	and	r24, r24
     488:	19 f0       	breq	.+6      	; 0x490 <__stack+0x31>
			twi_stop();
     48a:	41 df       	rcall	.-382    	; 0x30e <twi_stop>
			return err;
     48c:	8c 2f       	mov	r24, r28
     48e:	1f c0       	rjmp	.+62     	; 0x4ce <__stack+0x6f>
		}
		data[i] = TWDR;
     490:	f7 01       	movw	r30, r14
     492:	ec 0d       	add	r30, r12
     494:	fd 1d       	adc	r31, r13
     496:	83 b1       	in	r24, 0x03	; 3
     498:	80 83       	st	Z, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	c8 1a       	sub	r12, r24
     49e:	d8 0a       	sbc	r13, r24
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__stack+0x47>
     4a2:	c1 2c       	mov	r12, r1
     4a4:	d1 2c       	mov	r13, r1
     4a6:	c8 01       	movw	r24, r16
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	c8 16       	cp	r12, r24
     4ac:	d9 06       	cpc	r13, r25
     4ae:	40 f3       	brcs	.-48     	; 0x480 <__stack+0x21>
			return err;
		}
		data[i] = TWDR;
	}
	
	err = twi_data_read_ack(0);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	78 df       	rcall	.-272    	; 0x3a4 <twi_data_read_ack>
     4b4:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     4b6:	88 23       	and	r24, r24
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <__stack+0x61>
		twi_stop();
     4ba:	29 df       	rcall	.-430    	; 0x30e <twi_stop>
		return err;
     4bc:	8c 2f       	mov	r24, r28
     4be:	07 c0       	rjmp	.+14     	; 0x4ce <__stack+0x6f>
	}
	data[i] = TWDR;
     4c0:	f7 01       	movw	r30, r14
     4c2:	ec 0d       	add	r30, r12
     4c4:	fd 1d       	adc	r31, r13
     4c6:	83 b1       	in	r24, 0x03	; 3
     4c8:	80 83       	st	Z, r24
	
	twi_stop();
     4ca:	21 df       	rcall	.-446    	; 0x30e <twi_stop>
	
	return err;
     4cc:	8c 2f       	mov	r24, r28
}
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	08 95       	ret

000004de <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	18 2f       	mov	r17, r24
     4ee:	06 2f       	mov	r16, r22
     4f0:	6a 01       	movw	r12, r20
     4f2:	79 01       	movw	r14, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     4f4:	fa de       	rcall	.-524    	; 0x2ea <twi_start>
     4f6:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     4f8:	88 23       	and	r24, r24
     4fa:	19 f0       	breq	.+6      	; 0x502 <twi_write+0x24>
		twi_stop();
     4fc:	08 df       	rcall	.-496    	; 0x30e <twi_stop>
		return err;
     4fe:	8c 2f       	mov	r24, r28
     500:	27 c0       	rjmp	.+78     	; 0x550 <twi_write+0x72>
	}
	TWDR = (addr << 1) | 0;
     502:	11 0f       	add	r17, r17
     504:	13 b9       	out	0x03, r17	; 3
	
	
	err = twi_addr_write_ack();
     506:	18 df       	rcall	.-464    	; 0x338 <twi_addr_write_ack>
     508:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     50a:	88 23       	and	r24, r24
     50c:	19 f0       	breq	.+6      	; 0x514 <twi_write+0x36>
		twi_stop();
     50e:	ff de       	rcall	.-514    	; 0x30e <twi_stop>
		return err;
     510:	8c 2f       	mov	r24, r28
     512:	1e c0       	rjmp	.+60     	; 0x550 <twi_write+0x72>
	}
	
	TWDR = reg;
     514:	03 b9       	out	0x03, r16	; 3
	err = twi_data_write_ack();
     516:	22 df       	rcall	.-444    	; 0x35c <twi_data_write_ack>
     518:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     51a:	88 23       	and	r24, r24
     51c:	91 f0       	breq	.+36     	; 0x542 <twi_write+0x64>
		twi_stop();
     51e:	f7 de       	rcall	.-530    	; 0x30e <twi_stop>
		return err;
     520:	8c 2f       	mov	r24, r28
     522:	16 c0       	rjmp	.+44     	; 0x550 <twi_write+0x72>
	}
	
	for(i = 0; i < len;i++){
		TWDR = data[i];
     524:	f6 01       	movw	r30, r12
     526:	e0 0f       	add	r30, r16
     528:	f1 1f       	adc	r31, r17
     52a:	80 81       	ld	r24, Z
     52c:	83 b9       	out	0x03, r24	; 3
		err = twi_data_write_ack();
     52e:	16 df       	rcall	.-468    	; 0x35c <twi_data_write_ack>
     530:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     532:	88 23       	and	r24, r24
     534:	19 f0       	breq	.+6      	; 0x53c <twi_write+0x5e>
			twi_stop();
     536:	eb de       	rcall	.-554    	; 0x30e <twi_stop>
			return err;
     538:	8c 2f       	mov	r24, r28
     53a:	0a c0       	rjmp	.+20     	; 0x550 <twi_write+0x72>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     53c:	0f 5f       	subi	r16, 0xFF	; 255
     53e:	1f 4f       	sbci	r17, 0xFF	; 255
     540:	02 c0       	rjmp	.+4      	; 0x546 <twi_write+0x68>
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	10 e0       	ldi	r17, 0x00	; 0
     546:	0e 15       	cp	r16, r14
     548:	1f 05       	cpc	r17, r15
     54a:	60 f3       	brcs	.-40     	; 0x524 <twi_write+0x46>
			return err;
		}
	}
	
	
	twi_stop();
     54c:	e0 de       	rcall	.-576    	; 0x30e <twi_stop>
	
	return err;
     54e:	8c 2f       	mov	r24, r28
}
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	08 95       	ret

00000560 <twi_init>:





void twi_init(uint32_t speed){
     560:	9b 01       	movw	r18, r22
     562:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	74 e2       	ldi	r23, 0x24	; 36
     568:	84 ef       	ldi	r24, 0xF4	; 244
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	82 d2       	rcall	.+1284   	; 0xa72 <__udivmodsi4>
     56e:	da 01       	movw	r26, r20
     570:	c9 01       	movw	r24, r18
     572:	40 97       	sbiw	r24, 0x10	; 16
     574:	a1 09       	sbc	r26, r1
     576:	b1 09       	sbc	r27, r1
     578:	b6 95       	lsr	r27
     57a:	a7 95       	ror	r26
     57c:	97 95       	ror	r25
     57e:	87 95       	ror	r24
	TWBR = gen_t & 0xFF;
     580:	80 b9       	out	0x00, r24	; 0
	TWCR = (1 << TWEN) | (1 << TWIE);
     582:	85 e0       	ldi	r24, 0x05	; 5
     584:	86 bf       	out	0x36, r24	; 54
     586:	08 95       	ret

00000588 <serial_complete>:
	uint8_t data = 0;
	data = rx_buffer[rx_read_pos];
	rx_read_pos++;
	rx_count--;
	return data;
}
     588:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <read_complete>
     58c:	08 95       	ret

0000058e <serial_read_data>:
     58e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <read_complete>
     592:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <rx_count+0x1>
     596:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <rx_count>
     59a:	83 e3       	ldi	r24, 0x33	; 51
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	08 95       	ret

000005a0 <__vector_11>:
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	8f 93       	push	r24
     5ac:	9f 93       	push	r25
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
     5b2:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <rx_count>
     5b6:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <rx_count+0x1>
     5ba:	8c b1       	in	r24, 0x0c	; 12
     5bc:	ed 5c       	subi	r30, 0xCD	; 205
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
     5c0:	80 83       	st	Z, r24
     5c2:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <rx_count>
     5c6:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <rx_count+0x1>
     5ca:	ed 5c       	subi	r30, 0xCD	; 205
     5cc:	fe 4f       	sbci	r31, 0xFE	; 254
     5ce:	80 81       	ld	r24, Z
     5d0:	8d 30       	cpi	r24, 0x0D	; 13
     5d2:	51 f4       	brne	.+20     	; 0x5e8 <__vector_11+0x48>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <read_complete>
     5da:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <rx_count>
     5de:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <rx_count+0x1>
     5e2:	ec 5c       	subi	r30, 0xCC	; 204
     5e4:	fe 4f       	sbci	r31, 0xFE	; 254
     5e6:	10 82       	st	Z, r1
     5e8:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <rx_count>
     5ec:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <rx_count+0x1>
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <rx_count+0x1>
     5f6:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <rx_count>
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_13>:
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	8f 93       	push	r24
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <uart_tx_busy>
     61e:	8f 91       	pop	r24
     620:	0f 90       	pop	r0
     622:	0f be       	out	0x3f, r0	; 63
     624:	0f 90       	pop	r0
     626:	1f 90       	pop	r1
     628:	18 95       	reti

0000062a <uart_init>:
     62a:	44 23       	and	r20, r20
     62c:	29 f0       	breq	.+10     	; 0x638 <uart_init+0xe>
     62e:	2b b1       	in	r18, 0x0b	; 11
     630:	22 60       	ori	r18, 0x02	; 2
     632:	2b b9       	out	0x0b, r18	; 11
     634:	a8 e0       	ldi	r26, 0x08	; 8
     636:	01 c0       	rjmp	.+2      	; 0x63a <uart_init+0x10>
     638:	a0 e1       	ldi	r26, 0x10	; 16
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	9b 01       	movw	r18, r22
     63e:	ac 01       	movw	r20, r24
     640:	3a d2       	rcall	.+1140   	; 0xab6 <__muluhisi3>
     642:	9b 01       	movw	r18, r22
     644:	ac 01       	movw	r20, r24
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	74 e2       	ldi	r23, 0x24	; 36
     64a:	84 ef       	ldi	r24, 0xF4	; 244
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	11 d2       	rcall	.+1058   	; 0xa72 <__udivmodsi4>
     650:	ba 01       	movw	r22, r20
     652:	a9 01       	movw	r20, r18
     654:	41 50       	subi	r20, 0x01	; 1
     656:	51 09       	sbc	r21, r1
     658:	61 09       	sbc	r22, r1
     65a:	71 09       	sbc	r23, r1
     65c:	db 01       	movw	r26, r22
     65e:	ca 01       	movw	r24, r20
     660:	88 27       	eor	r24, r24
     662:	9f 70       	andi	r25, 0x0F	; 15
     664:	aa 27       	eor	r26, r26
     666:	bb 27       	eor	r27, r27
     668:	89 2f       	mov	r24, r25
     66a:	9a 2f       	mov	r25, r26
     66c:	ab 2f       	mov	r26, r27
     66e:	bb 27       	eor	r27, r27
     670:	80 bd       	out	0x20, r24	; 32
     672:	49 b9       	out	0x09, r20	; 9
     674:	8a b1       	in	r24, 0x0a	; 10
     676:	88 6d       	ori	r24, 0xD8	; 216
     678:	8a b9       	out	0x0a, r24	; 10
     67a:	86 e8       	ldi	r24, 0x86	; 134
     67c:	80 bd       	out	0x20, r24	; 32
     67e:	08 95       	ret

00000680 <parseString>:


uint8_t parseString(const char* input, display* output, rtc_date* newDate) {
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
     68e:	8b 01       	movw	r16, r22
     690:	7a 01       	movw	r14, r20

	if (strncmp(input, "$lim", 4) == 0) {
     692:	44 e0       	ldi	r20, 0x04	; 4
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	68 ea       	ldi	r22, 0xA8	; 168
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	44 d2       	rcall	.+1160   	; 0xb24 <strncmp>
     69c:	89 2b       	or	r24, r25
     69e:	61 f4       	brne	.+24     	; 0x6b8 <parseString+0x38>
		strncpy(output->second_line, input + 4, sizeof(output->second_line) - 1);
     6a0:	be 01       	movw	r22, r28
     6a2:	6c 5f       	subi	r22, 0xFC	; 252
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	44 e1       	ldi	r20, 0x14	; 20
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	c8 01       	movw	r24, r16
     6ac:	45 96       	adiw	r24, 0x15	; 21
     6ae:	48 d2       	rcall	.+1168   	; 0xb40 <strncpy>
		output->second_line[sizeof(output->second_line) - 1] = '\0';
     6b0:	f8 01       	movw	r30, r16
     6b2:	11 a6       	std	Z+41, r1	; 0x29
		return TEXT_SYNC_REQUEST;
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	5f c0       	rjmp	.+190    	; 0x776 <parseString+0xf6>
	}
	
	if (strncmp(input, "$tim", 4) == 0){
     6b8:	44 e0       	ldi	r20, 0x04	; 4
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	6d ea       	ldi	r22, 0xAD	; 173
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	ce 01       	movw	r24, r28
     6c2:	30 d2       	rcall	.+1120   	; 0xb24 <strncmp>
     6c4:	89 2b       	or	r24, r25
     6c6:	09 f5       	brne	.+66     	; 0x70a <parseString+0x8a>
		char* token = strtok((char*)(input + 4), ":");
     6c8:	62 eb       	ldi	r22, 0xB2	; 178
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	ce 01       	movw	r24, r28
     6ce:	04 96       	adiw	r24, 0x04	; 4
     6d0:	25 d2       	rcall	.+1098   	; 0xb1c <strtok>
		if (token != NULL) {
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <parseString+0x58>
     6d6:	42 c0       	rjmp	.+132    	; 0x75c <parseString+0xdc>
			newDate->hour = atoi(token);
     6d8:	04 d2       	rcall	.+1032   	; 0xae2 <atoi>
     6da:	f7 01       	movw	r30, r14
     6dc:	82 83       	std	Z+2, r24	; 0x02
			token = strtok(NULL, ":");
     6de:	62 eb       	ldi	r22, 0xB2	; 178
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	1a d2       	rcall	.+1076   	; 0xb1c <strtok>
			
			if (token != NULL) {
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	d1 f1       	breq	.+116    	; 0x760 <parseString+0xe0>
				newDate->minute = atoi(token);
     6ec:	fa d1       	rcall	.+1012   	; 0xae2 <atoi>
     6ee:	f7 01       	movw	r30, r14
     6f0:	81 83       	std	Z+1, r24	; 0x01
				token = strtok(NULL, ":");
     6f2:	62 eb       	ldi	r22, 0xB2	; 178
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	10 d2       	rcall	.+1056   	; 0xb1c <strtok>
				
				if (token != NULL) {
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	91 f1       	breq	.+100    	; 0x764 <parseString+0xe4>
					newDate->second = atoi(token);
     700:	f0 d1       	rcall	.+992    	; 0xae2 <atoi>
     702:	f7 01       	movw	r30, r14
     704:	80 83       	st	Z, r24
				}
			}
		}
		return TIME_SYNC_REQUEST;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	36 c0       	rjmp	.+108    	; 0x776 <parseString+0xf6>
	}
	if (strncmp(input, "$dat", 4) == 0){
     70a:	44 e0       	ldi	r20, 0x04	; 4
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	64 eb       	ldi	r22, 0xB4	; 180
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	ce 01       	movw	r24, r28
     714:	07 d2       	rcall	.+1038   	; 0xb24 <strncmp>
     716:	89 2b       	or	r24, r25
     718:	39 f5       	brne	.+78     	; 0x768 <parseString+0xe8>
		char* token = strtok((char*)(input + 4), "-");
     71a:	69 eb       	ldi	r22, 0xB9	; 185
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	ce 01       	movw	r24, r28
     720:	04 96       	adiw	r24, 0x04	; 4
     722:	fc d1       	rcall	.+1016   	; 0xb1c <strtok>
		if (token != NULL) {
     724:	00 97       	sbiw	r24, 0x00	; 0
     726:	11 f1       	breq	.+68     	; 0x76c <parseString+0xec>
			newDate->date = atoi(token);
     728:	dc d1       	rcall	.+952    	; 0xae2 <atoi>
     72a:	f7 01       	movw	r30, r14
     72c:	83 83       	std	Z+3, r24	; 0x03
			token = strtok(NULL, "-");
     72e:	69 eb       	ldi	r22, 0xB9	; 185
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	f2 d1       	rcall	.+996    	; 0xb1c <strtok>
			
			if (token != NULL) {
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	d1 f0       	breq	.+52     	; 0x770 <parseString+0xf0>
				newDate->month = atoi(token);
     73c:	d2 d1       	rcall	.+932    	; 0xae2 <atoi>
     73e:	f7 01       	movw	r30, r14
     740:	84 83       	std	Z+4, r24	; 0x04
				token = strtok(NULL, "-");
     742:	69 eb       	ldi	r22, 0xB9	; 185
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	e8 d1       	rcall	.+976    	; 0xb1c <strtok>
				if (token != NULL) {
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	91 f0       	breq	.+36     	; 0x774 <parseString+0xf4>
					newDate->year = atoi(token);
     750:	c8 d1       	rcall	.+912    	; 0xae2 <atoi>
     752:	f7 01       	movw	r30, r14
     754:	96 83       	std	Z+6, r25	; 0x06
     756:	85 83       	std	Z+5, r24	; 0x05
				}
			}
		}
		return DATE_SYNC_REQUEST;
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	0d c0       	rjmp	.+26     	; 0x776 <parseString+0xf6>
				if (token != NULL) {
					newDate->second = atoi(token);
				}
			}
		}
		return TIME_SYNC_REQUEST;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0b c0       	rjmp	.+22     	; 0x776 <parseString+0xf6>
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	09 c0       	rjmp	.+18     	; 0x776 <parseString+0xf6>
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	07 c0       	rjmp	.+14     	; 0x776 <parseString+0xf6>
			}
		}
		return DATE_SYNC_REQUEST;
	}
	
	return ERROR_SYNC_REQUEST;
     768:	84 e0       	ldi	r24, 0x04	; 4
     76a:	05 c0       	rjmp	.+10     	; 0x776 <parseString+0xf6>
				if (token != NULL) {
					newDate->year = atoi(token);
				}
			}
		}
		return DATE_SYNC_REQUEST;
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	03 c0       	rjmp	.+6      	; 0x776 <parseString+0xf6>
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	01 c0       	rjmp	.+2      	; 0x776 <parseString+0xf6>
     774:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return ERROR_SYNC_REQUEST;
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	08 95       	ret

00000784 <spiwrite>:


void spiwrite(uint8_t c)
{
	unsigned char n;
	for(n=8; n>0; n--)
     784:	98 e0       	ldi	r25, 0x08	; 8
     786:	1d c0       	rjmp	.+58     	; 0x7c2 <spiwrite+0x3e>
	{
		CLK_LO;;              //SCL = low
     788:	28 b3       	in	r18, 0x18	; 24
     78a:	2f 7d       	andi	r18, 0xDF	; 223
     78c:	28 bb       	out	0x18, r18	; 24
		if(c &(1<<(n-1))){DAT_HI;}
     78e:	49 2f       	mov	r20, r25
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	41 50       	subi	r20, 0x01	; 1
     794:	51 09       	sbc	r21, r1
     796:	28 2f       	mov	r18, r24
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <spiwrite+0x1c>
     79c:	35 95       	asr	r19
     79e:	27 95       	ror	r18
     7a0:	4a 95       	dec	r20
     7a2:	e2 f7       	brpl	.-8      	; 0x79c <spiwrite+0x18>
     7a4:	20 ff       	sbrs	r18, 0
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <spiwrite+0x2c>
     7a8:	28 b3       	in	r18, 0x18	; 24
     7aa:	28 60       	ori	r18, 0x08	; 8
     7ac:	28 bb       	out	0x18, r18	; 24
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <spiwrite+0x32>
		else{ DAT_LO;}
     7b0:	28 b3       	in	r18, 0x18	; 24
     7b2:	27 7f       	andi	r18, 0xF7	; 247
     7b4:	28 bb       	out	0x18, r18	; 24
		nop();
     7b6:	00 00       	nop
		CLK_HI;               //SCL rising edge trigger
     7b8:	28 b3       	in	r18, 0x18	; 24
     7ba:	20 62       	ori	r18, 0x20	; 32
     7bc:	28 bb       	out	0x18, r18	; 24
		nop();
     7be:	00 00       	nop


void spiwrite(uint8_t c)
{
	unsigned char n;
	for(n=8; n>0; n--)
     7c0:	91 50       	subi	r25, 0x01	; 1
     7c2:	91 11       	cpse	r25, r1
     7c4:	e1 cf       	rjmp	.-62     	; 0x788 <spiwrite+0x4>
		else{ DAT_LO;}
		nop();
		CLK_HI;               //SCL rising edge trigger
		nop();
	}
}
     7c6:	08 95       	ret

000007c8 <vfd_command>:

void vfd_command(uint8_t c)
{
     7c8:	cf 93       	push	r28
     7ca:	c8 2f       	mov	r28, r24
	STB_HI
     7cc:	88 b3       	in	r24, 0x18	; 24
     7ce:	81 60       	ori	r24, 0x01	; 1
     7d0:	88 bb       	out	0x18, r24	; 24
	nop();
     7d2:	00 00       	nop
	STB_LO
     7d4:	88 b3       	in	r24, 0x18	; 24
     7d6:	8e 7f       	andi	r24, 0xFE	; 254
     7d8:	88 bb       	out	0x18, r24	; 24
	spiwrite(0xf8);
     7da:	88 ef       	ldi	r24, 0xF8	; 248
     7dc:	d3 df       	rcall	.-90     	; 0x784 <spiwrite>
	spiwrite(c);
     7de:	8c 2f       	mov	r24, r28
     7e0:	d1 df       	rcall	.-94     	; 0x784 <spiwrite>
	STB_HI
     7e2:	88 b3       	in	r24, 0x18	; 24
     7e4:	81 60       	ori	r24, 0x01	; 1
     7e6:	88 bb       	out	0x18, r24	; 24
	nop();
     7e8:	00 00       	nop
	STB_LO
     7ea:	88 b3       	in	r24, 0x18	; 24
     7ec:	8e 7f       	andi	r24, 0xFE	; 254
     7ee:	88 bb       	out	0x18, r24	; 24
}
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <vfd_data>:

void vfd_data(uint8_t c)
{
     7f4:	cf 93       	push	r28
     7f6:	c8 2f       	mov	r28, r24
	STB_HI
     7f8:	88 b3       	in	r24, 0x18	; 24
     7fa:	81 60       	ori	r24, 0x01	; 1
     7fc:	88 bb       	out	0x18, r24	; 24
	nop();
     7fe:	00 00       	nop
	STB_LO
     800:	88 b3       	in	r24, 0x18	; 24
     802:	8e 7f       	andi	r24, 0xFE	; 254
     804:	88 bb       	out	0x18, r24	; 24
	spiwrite(0xfa);
     806:	8a ef       	ldi	r24, 0xFA	; 250
     808:	bd df       	rcall	.-134    	; 0x784 <spiwrite>
	//_delay_us(1);
	spiwrite(c);
     80a:	8c 2f       	mov	r24, r28
     80c:	bb df       	rcall	.-138    	; 0x784 <spiwrite>
	STB_HI
     80e:	88 b3       	in	r24, 0x18	; 24
     810:	81 60       	ori	r24, 0x01	; 1
     812:	88 bb       	out	0x18, r24	; 24
	nop();
     814:	00 00       	nop
	STB_LO
     816:	88 b3       	in	r24, 0x18	; 24
     818:	8e 7f       	andi	r24, 0xFE	; 254
     81a:	88 bb       	out	0x18, r24	; 24
}
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <vfd_init>:


void vfd_init()
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
	RST_LO
     824:	85 b3       	in	r24, 0x15	; 21
     826:	8e 7f       	andi	r24, 0xFE	; 254
     828:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82a:	8f e3       	ldi	r24, 0x3F	; 63
     82c:	9c e9       	ldi	r25, 0x9C	; 156
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <vfd_init+0xe>
     832:	00 c0       	rjmp	.+0      	; 0x834 <vfd_init+0x14>
     834:	00 00       	nop
	_delay_ms(10);
	RST_HI
     836:	85 b3       	in	r24, 0x15	; 21
     838:	81 60       	ori	r24, 0x01	; 1
     83a:	85 bb       	out	0x15, r24	; 21
	CS_LO
     83c:	85 b3       	in	r24, 0x15	; 21
     83e:	8d 7f       	andi	r24, 0xFD	; 253
     840:	85 bb       	out	0x15, r24	; 21
	vfd_command(0b00111000); //0x38		//Function Set address [0,0,1,DL,N,X,BR1,BR0]
     842:	88 e3       	ldi	r24, 0x38	; 56
     844:	c1 df       	rcall	.-126    	; 0x7c8 <vfd_command>
	vfd_command(0b00000001); //0x01		//Clear Display
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	bf df       	rcall	.-130    	; 0x7c8 <vfd_command>
	vfd_data(0x00);						//sets DDRAM address at 00H
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	d3 df       	rcall	.-90     	; 0x7f4 <vfd_data>
	vfd_command(0b00001100); //0x0c		//Display ON/Off [0,0,0,0,1,D,C,B] D-screen on/off, C-cursor on/off, B-blink cursor on/off
     84e:	8c e0       	ldi	r24, 0x0C	; 12
     850:	bb df       	rcall	.-138    	; 0x7c8 <vfd_command>
	vfd_command(0b10000000); //0x80		//set cursor to 0 position
     852:	80 e8       	ldi	r24, 0x80	; 128
     854:	b9 df       	rcall	.-142    	; 0x7c8 <vfd_command>
	int i;
	for (i = 0; i < 64; i++) {
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	d0 e0       	ldi	r29, 0x00	; 0
     85a:	03 c0       	rjmp	.+6      	; 0x862 <vfd_init+0x42>
		vfd_data(0xff);
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	ca df       	rcall	.-108    	; 0x7f4 <vfd_data>
	vfd_command(0b00000001); //0x01		//Clear Display
	vfd_data(0x00);						//sets DDRAM address at 00H
	vfd_command(0b00001100); //0x0c		//Display ON/Off [0,0,0,0,1,D,C,B] D-screen on/off, C-cursor on/off, B-blink cursor on/off
	vfd_command(0b10000000); //0x80		//set cursor to 0 position
	int i;
	for (i = 0; i < 64; i++) {
     860:	21 96       	adiw	r28, 0x01	; 1
     862:	c0 34       	cpi	r28, 0x40	; 64
     864:	d1 05       	cpc	r29, r1
     866:	d4 f3       	brlt	.-12     	; 0x85c <vfd_init+0x3c>
		vfd_data(0xff);
	}
	vfd_command(0b00000001); //0x01
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	ae df       	rcall	.-164    	; 0x7c8 <vfd_command>
	CS_HI
     86c:	85 b3       	in	r24, 0x15	; 21
     86e:	82 60       	ori	r24, 0x02	; 2
     870:	85 bb       	out	0x15, r24	; 21
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <vfd_set_cursor>:

void vfd_set_cursor(uint8_t line, uint8_t position){
	if(line==2){position += 0x40;}
     878:	82 30       	cpi	r24, 0x02	; 2
     87a:	09 f4       	brne	.+2      	; 0x87e <vfd_set_cursor+0x6>
     87c:	60 5c       	subi	r22, 0xC0	; 192
	CS_LO
     87e:	85 b3       	in	r24, 0x15	; 21
     880:	8d 7f       	andi	r24, 0xFD	; 253
     882:	85 bb       	out	0x15, r24	; 21
	vfd_command(0b10000000 | position);
     884:	86 2f       	mov	r24, r22
     886:	80 68       	ori	r24, 0x80	; 128
     888:	9f df       	rcall	.-194    	; 0x7c8 <vfd_command>
	CS_HI
     88a:	85 b3       	in	r24, 0x15	; 21
     88c:	82 60       	ori	r24, 0x02	; 2
     88e:	85 bb       	out	0x15, r24	; 21
     890:	08 95       	ret

00000892 <vfd_string>:
}


void vfd_string(uint8_t *c){
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	8c 01       	movw	r16, r24
	uint16_t i = 0;
     89c:	c0 e0       	ldi	r28, 0x00	; 0
     89e:	d0 e0       	ldi	r29, 0x00	; 0
	do{
		vfd_data(c[i]);
     8a0:	f8 01       	movw	r30, r16
     8a2:	ec 0f       	add	r30, r28
     8a4:	fd 1f       	adc	r31, r29
     8a6:	80 81       	ld	r24, Z
     8a8:	a5 df       	rcall	.-182    	; 0x7f4 <vfd_data>
		i++;
     8aa:	21 96       	adiw	r28, 0x01	; 1
		
	}while(c[i] != '\0');
     8ac:	f8 01       	movw	r30, r16
     8ae:	ec 0f       	add	r30, r28
     8b0:	fd 1f       	adc	r31, r29
     8b2:	80 81       	ld	r24, Z
     8b4:	81 11       	cpse	r24, r1
     8b6:	f4 cf       	rjmp	.-24     	; 0x8a0 <vfd_string+0xe>
	//uart_send_byte(c[i]);
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <main>:

int main(void)
{
   
   
   sei();
     8c2:	78 94       	sei
   uart_init(38400,0);
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	76 e9       	ldi	r23, 0x96	; 150
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	ad de       	rcall	.-678    	; 0x62a <uart_init>
   twi_init(400000);
     8d0:	60 e8       	ldi	r22, 0x80	; 128
     8d2:	7a e1       	ldi	r23, 0x1A	; 26
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	43 de       	rcall	.-890    	; 0x560 <twi_init>
   //char char_array[128]="\0";
   
   //DDRC = 255;
   set_pin_dir(&vfd_reset , PORT_DIR_OUT);	set_pin_level(&vfd_reset , false);
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	85 ea       	ldi	r24, 0xA5	; 165
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	e7 db       	rcall	.-2098   	; 0xb0 <set_pin_dir>
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	85 ea       	ldi	r24, 0xA5	; 165
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	ba db       	rcall	.-2188   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_cs , PORT_DIR_OUT);		set_pin_level(&vfd_cs , true);
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	82 ea       	ldi	r24, 0xA2	; 162
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	df db       	rcall	.-2114   	; 0xb0 <set_pin_dir>
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	82 ea       	ldi	r24, 0xA2	; 162
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	b2 db       	rcall	.-2204   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_stb , PORT_DIR_OUT);	set_pin_level(&vfd_stb , false);
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	8f e9       	ldi	r24, 0x9F	; 159
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	d7 db       	rcall	.-2130   	; 0xb0 <set_pin_dir>
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	8f e9       	ldi	r24, 0x9F	; 159
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	aa db       	rcall	.-2220   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_mosi , PORT_DIR_OUT);	set_pin_level(&vfd_mosi , false);
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	8c e9       	ldi	r24, 0x9C	; 156
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	cf db       	rcall	.-2146   	; 0xb0 <set_pin_dir>
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	8c e9       	ldi	r24, 0x9C	; 156
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a2 db       	rcall	.-2236   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_clk , PORT_DIR_OUT);	set_pin_level(&vfd_clk , true);
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	89 e9       	ldi	r24, 0x99	; 153
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	c7 db       	rcall	.-2162   	; 0xb0 <set_pin_dir>
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	89 e9       	ldi	r24, 0x99	; 153
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	9a db       	rcall	.-2252   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_40v , PORT_DIR_OUT);	set_pin_level(&vfd_40v , true);
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	86 e9       	ldi	r24, 0x96	; 150
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	bf db       	rcall	.-2178   	; 0xb0 <set_pin_dir>
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	86 e9       	ldi	r24, 0x96	; 150
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	92 db       	rcall	.-2268   	; 0x5e <set_pin_level>
     93a:	2f ef       	ldi	r18, 0xFF	; 255
     93c:	89 e6       	ldi	r24, 0x69	; 105
     93e:	98 e1       	ldi	r25, 0x18	; 24
     940:	21 50       	subi	r18, 0x01	; 1
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	90 40       	sbci	r25, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <main+0x7e>
     948:	00 c0       	rjmp	.+0      	; 0x94a <main+0x88>
     94a:	00 00       	nop
   _delay_ms(500);
   timer1_init(0);
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	b9 dc       	rcall	.-1678   	; 0x2c4 <timer1_init>
   uint8_t blink_divider = 0;
   //rtc_set(&sys_rtc);
   rtc_int_enable(&sys_rtc ,0);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	84 e6       	ldi	r24, 0x64	; 100
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	ec db       	rcall	.-2088   	; 0x134 <rtc_int_enable>
   
   
   
   vfd_init();
     95c:	61 df       	rcall	.-318    	; 0x820 <vfd_init>
   vfd_set_cursor(1,0);
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	8a df       	rcall	.-236    	; 0x878 <vfd_set_cursor>
   vfd_string((uint8_t *)"github.com/vanyap1");
     964:	8b eb       	ldi	r24, 0xBB	; 187
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	94 df       	rcall	.-216    	; 0x892 <vfd_string>
   vfd_set_cursor(2,0);
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	84 df       	rcall	.-248    	; 0x878 <vfd_set_cursor>
   vfd_string((uint8_t *)"baud:38400 > Enjoy:)");
     970:	8e ec       	ldi	r24, 0xCE	; 206
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	8e df       	rcall	.-228    	; 0x892 <vfd_string>
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	85 ee       	ldi	r24, 0xE5	; 229
     97a:	9a ea       	ldi	r25, 0xAA	; 170
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	80 40       	sbci	r24, 0x00	; 0
     980:	90 40       	sbci	r25, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <main+0xba>
     984:	00 c0       	rjmp	.+0      	; 0x986 <main+0xc4>
     986:	00 00       	nop




int main(void)
{
     988:	c0 e0       	ldi	r28, 0x00	; 0
   {


	//Next feature is screen brightness control.
	
	if (serial_complete()){
     98a:	fe dd       	rcall	.-1028   	; 0x588 <serial_complete>
     98c:	88 23       	and	r24, r24
     98e:	a1 f1       	breq	.+104    	; 0x9f8 <main+0x136>
		const char *data_p = serial_read_data();
     990:	fe dd       	rcall	.-1028   	; 0x58e <serial_read_data>
     992:	8c 01       	movw	r16, r24
		rtc_sync(&newDate);
     994:	85 e3       	ldi	r24, 0x35	; 53
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	f8 db       	rcall	.-2064   	; 0x18a <rtc_sync>
		uint8_t res = parseString(data_p, &vfd, &newDate);
     99a:	45 e3       	ldi	r20, 0x35	; 53
     99c:	52 e0       	ldi	r21, 0x02	; 2
     99e:	6c e6       	ldi	r22, 0x6C	; 108
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	c8 01       	movw	r24, r16
     9a4:	6d de       	rcall	.-806    	; 0x680 <parseString>
		
		switch (res) {
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	69 f0       	breq	.+26     	; 0x9c4 <main+0x102>
     9aa:	18 f4       	brcc	.+6      	; 0x9b2 <main+0xf0>
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	31 f0       	breq	.+12     	; 0x9bc <main+0xfa>
     9b0:	23 c0       	rjmp	.+70     	; 0x9f8 <main+0x136>
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	59 f0       	breq	.+22     	; 0x9cc <main+0x10a>
     9b6:	84 30       	cpi	r24, 0x04	; 4
     9b8:	b1 f0       	breq	.+44     	; 0x9e6 <main+0x124>
     9ba:	1e c0       	rjmp	.+60     	; 0x9f8 <main+0x136>
			case TIME_SYNC_REQUEST:							//Time synchronization request handler
			rtc_set(&newDate);
     9bc:	85 e3       	ldi	r24, 0x35	; 53
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	33 dc       	rcall	.-1946   	; 0x228 <rtc_set>
			break;
     9c2:	1a c0       	rjmp	.+52     	; 0x9f8 <main+0x136>

			case DATE_SYNC_REQUEST:							//Date synchronization request handler
			rtc_set(&newDate);
     9c4:	85 e3       	ldi	r24, 0x35	; 53
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	2f dc       	rcall	.-1954   	; 0x228 <rtc_set>
			break;
     9ca:	16 c0       	rjmp	.+44     	; 0x9f8 <main+0x136>
			
			case TEXT_SYNC_REQUEST:							//Write PC message
				vfd_set_cursor(2,0);
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	53 df       	rcall	.-346    	; 0x878 <vfd_set_cursor>
				vfd_string((uint8_t *)"                    "); //Clear before draw new line
     9d2:	83 ee       	ldi	r24, 0xE3	; 227
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	5d df       	rcall	.-326    	; 0x892 <vfd_string>
				vfd_set_cursor(2,0);
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	4d df       	rcall	.-358    	; 0x878 <vfd_set_cursor>
				vfd_string((uint8_t *)vfd.second_line);
     9de:	81 e8       	ldi	r24, 0x81	; 129
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	57 df       	rcall	.-338    	; 0x892 <vfd_string>
			break;
     9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <main+0x136>

			case ERROR_SYNC_REQUEST:						
			sprintf(vfd.second_line, "!!! data parse error");
     9e6:	85 e1       	ldi	r24, 0x15	; 21
     9e8:	e9 e1       	ldi	r30, 0x19	; 25
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	a1 e8       	ldi	r26, 0x81	; 129
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	01 90       	ld	r0, Z+
     9f2:	0d 92       	st	X+, r0
     9f4:	8a 95       	dec	r24
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <main+0x12e>
     9f8:	2f e7       	ldi	r18, 0x7F	; 127
     9fa:	88 e3       	ldi	r24, 0x38	; 56
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	21 50       	subi	r18, 0x01	; 1
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <main+0x13c>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <main+0x146>
     a08:	00 00       	nop




	_delay_ms(25);
	blink_divider++;
     a0a:	cf 5f       	subi	r28, 0xFF	; 255
	if (blink_divider >= 15){
     a0c:	cf 30       	cpi	r28, 0x0F	; 15
     a0e:	08 f4       	brcc	.+2      	; 0xa12 <main+0x150>
     a10:	bc cf       	rjmp	.-136    	; 0x98a <main+0xc8>
		rtc_sync(&sys_rtc);
     a12:	84 e6       	ldi	r24, 0x64	; 100
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	b9 db       	rcall	.-2190   	; 0x18a <rtc_sync>
		sprintf(vfd.first_line, "%02d:%02d:%02d  %02d-%02d-20%02d", sys_rtc.hour, sys_rtc.minute, sys_rtc.second, sys_rtc.date, sys_rtc.month, sys_rtc.year);
     a18:	e4 e6       	ldi	r30, 0x64	; 100
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	44 81       	ldd	r20, Z+4	; 0x04
     a1e:	33 81       	ldd	r19, Z+3	; 0x03
     a20:	20 81       	ld	r18, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	82 81       	ldd	r24, Z+2	; 0x02
     a26:	56 81       	ldd	r21, Z+6	; 0x06
     a28:	5f 93       	push	r21
     a2a:	55 81       	ldd	r21, Z+5	; 0x05
     a2c:	5f 93       	push	r21
     a2e:	1f 92       	push	r1
     a30:	4f 93       	push	r20
     a32:	1f 92       	push	r1
     a34:	3f 93       	push	r19
     a36:	1f 92       	push	r1
     a38:	2f 93       	push	r18
     a3a:	1f 92       	push	r1
     a3c:	9f 93       	push	r25
     a3e:	1f 92       	push	r1
     a40:	8f 93       	push	r24
     a42:	88 ef       	ldi	r24, 0xF8	; 248
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	8c e6       	ldi	r24, 0x6C	; 108
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	b4 d0       	rcall	.+360    	; 0xbbc <sprintf>
		
		blink_divider = 0;
		vfd_set_cursor(1,0);
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	0f df       	rcall	.-482    	; 0x878 <vfd_set_cursor>
		vfd_string((uint8_t *)vfd.first_line);
     a5a:	8c e6       	ldi	r24, 0x6C	; 108
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	19 df       	rcall	.-462    	; 0x892 <vfd_string>
     a60:	8d b7       	in	r24, 0x3d	; 61
     a62:	9e b7       	in	r25, 0x3e	; 62
     a64:	40 96       	adiw	r24, 0x10	; 16
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	9e bf       	out	0x3e, r25	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	8d bf       	out	0x3d, r24	; 61
     a70:	8b cf       	rjmp	.-234    	; 0x988 <main+0xc6>

00000a72 <__udivmodsi4>:
     a72:	a1 e2       	ldi	r26, 0x21	; 33
     a74:	1a 2e       	mov	r1, r26
     a76:	aa 1b       	sub	r26, r26
     a78:	bb 1b       	sub	r27, r27
     a7a:	fd 01       	movw	r30, r26
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__udivmodsi4_ep>

00000a7e <__udivmodsi4_loop>:
     a7e:	aa 1f       	adc	r26, r26
     a80:	bb 1f       	adc	r27, r27
     a82:	ee 1f       	adc	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	a2 17       	cp	r26, r18
     a88:	b3 07       	cpc	r27, r19
     a8a:	e4 07       	cpc	r30, r20
     a8c:	f5 07       	cpc	r31, r21
     a8e:	20 f0       	brcs	.+8      	; 0xa98 <__udivmodsi4_ep>
     a90:	a2 1b       	sub	r26, r18
     a92:	b3 0b       	sbc	r27, r19
     a94:	e4 0b       	sbc	r30, r20
     a96:	f5 0b       	sbc	r31, r21

00000a98 <__udivmodsi4_ep>:
     a98:	66 1f       	adc	r22, r22
     a9a:	77 1f       	adc	r23, r23
     a9c:	88 1f       	adc	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	1a 94       	dec	r1
     aa2:	69 f7       	brne	.-38     	; 0xa7e <__udivmodsi4_loop>
     aa4:	60 95       	com	r22
     aa6:	70 95       	com	r23
     aa8:	80 95       	com	r24
     aaa:	90 95       	com	r25
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	bd 01       	movw	r22, r26
     ab2:	cf 01       	movw	r24, r30
     ab4:	08 95       	ret

00000ab6 <__muluhisi3>:
     ab6:	09 d0       	rcall	.+18     	; 0xaca <__umulhisi3>
     ab8:	a5 9f       	mul	r26, r21
     aba:	90 0d       	add	r25, r0
     abc:	b4 9f       	mul	r27, r20
     abe:	90 0d       	add	r25, r0
     ac0:	a4 9f       	mul	r26, r20
     ac2:	80 0d       	add	r24, r0
     ac4:	91 1d       	adc	r25, r1
     ac6:	11 24       	eor	r1, r1
     ac8:	08 95       	ret

00000aca <__umulhisi3>:
     aca:	a2 9f       	mul	r26, r18
     acc:	b0 01       	movw	r22, r0
     ace:	b3 9f       	mul	r27, r19
     ad0:	c0 01       	movw	r24, r0
     ad2:	a3 9f       	mul	r26, r19
     ad4:	01 d0       	rcall	.+2      	; 0xad8 <__umulhisi3+0xe>
     ad6:	b2 9f       	mul	r27, r18
     ad8:	70 0d       	add	r23, r0
     ada:	81 1d       	adc	r24, r1
     adc:	11 24       	eor	r1, r1
     ade:	91 1d       	adc	r25, r1
     ae0:	08 95       	ret

00000ae2 <atoi>:
     ae2:	fc 01       	movw	r30, r24
     ae4:	88 27       	eor	r24, r24
     ae6:	99 27       	eor	r25, r25
     ae8:	e8 94       	clt
     aea:	21 91       	ld	r18, Z+
     aec:	20 32       	cpi	r18, 0x20	; 32
     aee:	e9 f3       	breq	.-6      	; 0xaea <atoi+0x8>
     af0:	29 30       	cpi	r18, 0x09	; 9
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <atoi+0x16>
     af4:	2e 30       	cpi	r18, 0x0E	; 14
     af6:	c8 f3       	brcs	.-14     	; 0xaea <atoi+0x8>
     af8:	2b 32       	cpi	r18, 0x2B	; 43
     afa:	39 f0       	breq	.+14     	; 0xb0a <atoi+0x28>
     afc:	2d 32       	cpi	r18, 0x2D	; 45
     afe:	31 f4       	brne	.+12     	; 0xb0c <atoi+0x2a>
     b00:	68 94       	set
     b02:	03 c0       	rjmp	.+6      	; 0xb0a <atoi+0x28>
     b04:	53 d0       	rcall	.+166    	; 0xbac <__mulhi_const_10>
     b06:	82 0f       	add	r24, r18
     b08:	91 1d       	adc	r25, r1
     b0a:	21 91       	ld	r18, Z+
     b0c:	20 53       	subi	r18, 0x30	; 48
     b0e:	2a 30       	cpi	r18, 0x0A	; 10
     b10:	c8 f3       	brcs	.-14     	; 0xb04 <atoi+0x22>
     b12:	1e f4       	brtc	.+6      	; 0xb1a <atoi+0x38>
     b14:	90 95       	com	r25
     b16:	81 95       	neg	r24
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	08 95       	ret

00000b1c <strtok>:
     b1c:	4e e2       	ldi	r20, 0x2E	; 46
     b1e:	51 e0       	ldi	r21, 0x01	; 1
     b20:	1e d0       	rcall	.+60     	; 0xb5e <strtok_r>
     b22:	08 95       	ret

00000b24 <strncmp>:
     b24:	fb 01       	movw	r30, r22
     b26:	dc 01       	movw	r26, r24
     b28:	41 50       	subi	r20, 0x01	; 1
     b2a:	50 40       	sbci	r21, 0x00	; 0
     b2c:	30 f0       	brcs	.+12     	; 0xb3a <strncmp+0x16>
     b2e:	8d 91       	ld	r24, X+
     b30:	01 90       	ld	r0, Z+
     b32:	80 19       	sub	r24, r0
     b34:	19 f4       	brne	.+6      	; 0xb3c <strncmp+0x18>
     b36:	00 20       	and	r0, r0
     b38:	b9 f7       	brne	.-18     	; 0xb28 <strncmp+0x4>
     b3a:	88 1b       	sub	r24, r24
     b3c:	99 0b       	sbc	r25, r25
     b3e:	08 95       	ret

00000b40 <strncpy>:
     b40:	fb 01       	movw	r30, r22
     b42:	dc 01       	movw	r26, r24
     b44:	41 50       	subi	r20, 0x01	; 1
     b46:	50 40       	sbci	r21, 0x00	; 0
     b48:	48 f0       	brcs	.+18     	; 0xb5c <strncpy+0x1c>
     b4a:	01 90       	ld	r0, Z+
     b4c:	0d 92       	st	X+, r0
     b4e:	00 20       	and	r0, r0
     b50:	c9 f7       	brne	.-14     	; 0xb44 <strncpy+0x4>
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <strncpy+0x16>
     b54:	1d 92       	st	X+, r1
     b56:	41 50       	subi	r20, 0x01	; 1
     b58:	50 40       	sbci	r21, 0x00	; 0
     b5a:	e0 f7       	brcc	.-8      	; 0xb54 <strncpy+0x14>
     b5c:	08 95       	ret

00000b5e <strtok_r>:
     b5e:	fa 01       	movw	r30, r20
     b60:	a1 91       	ld	r26, Z+
     b62:	b0 81       	ld	r27, Z
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	19 f4       	brne	.+6      	; 0xb6e <strtok_r+0x10>
     b68:	10 97       	sbiw	r26, 0x00	; 0
     b6a:	e1 f0       	breq	.+56     	; 0xba4 <strtok_r+0x46>
     b6c:	cd 01       	movw	r24, r26
     b6e:	dc 01       	movw	r26, r24
     b70:	cd 01       	movw	r24, r26
     b72:	0d 90       	ld	r0, X+
     b74:	00 20       	and	r0, r0
     b76:	11 f4       	brne	.+4      	; 0xb7c <strtok_r+0x1e>
     b78:	c0 01       	movw	r24, r0
     b7a:	13 c0       	rjmp	.+38     	; 0xba2 <strtok_r+0x44>
     b7c:	fb 01       	movw	r30, r22
     b7e:	21 91       	ld	r18, Z+
     b80:	22 23       	and	r18, r18
     b82:	19 f0       	breq	.+6      	; 0xb8a <strtok_r+0x2c>
     b84:	20 15       	cp	r18, r0
     b86:	d9 f7       	brne	.-10     	; 0xb7e <strtok_r+0x20>
     b88:	f3 cf       	rjmp	.-26     	; 0xb70 <strtok_r+0x12>
     b8a:	fb 01       	movw	r30, r22
     b8c:	21 91       	ld	r18, Z+
     b8e:	20 15       	cp	r18, r0
     b90:	19 f4       	brne	.+6      	; 0xb98 <strtok_r+0x3a>
     b92:	1e 92       	st	-X, r1
     b94:	11 96       	adiw	r26, 0x01	; 1
     b96:	06 c0       	rjmp	.+12     	; 0xba4 <strtok_r+0x46>
     b98:	22 23       	and	r18, r18
     b9a:	c1 f7       	brne	.-16     	; 0xb8c <strtok_r+0x2e>
     b9c:	0d 90       	ld	r0, X+
     b9e:	00 20       	and	r0, r0
     ba0:	a1 f7       	brne	.-24     	; 0xb8a <strtok_r+0x2c>
     ba2:	d0 01       	movw	r26, r0
     ba4:	fa 01       	movw	r30, r20
     ba6:	a1 93       	st	Z+, r26
     ba8:	b0 83       	st	Z, r27
     baa:	08 95       	ret

00000bac <__mulhi_const_10>:
     bac:	7a e0       	ldi	r23, 0x0A	; 10
     bae:	97 9f       	mul	r25, r23
     bb0:	90 2d       	mov	r25, r0
     bb2:	87 9f       	mul	r24, r23
     bb4:	80 2d       	mov	r24, r0
     bb6:	91 0d       	add	r25, r1
     bb8:	11 24       	eor	r1, r1
     bba:	08 95       	ret

00000bbc <sprintf>:
     bbc:	ae e0       	ldi	r26, 0x0E	; 14
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e3 ee       	ldi	r30, 0xE3	; 227
     bc2:	f5 e0       	ldi	r31, 0x05	; 5
     bc4:	aa c2       	rjmp	.+1364   	; 0x111a <__prologue_saves__+0x1c>
     bc6:	0d 89       	ldd	r16, Y+21	; 0x15
     bc8:	1e 89       	ldd	r17, Y+22	; 0x16
     bca:	86 e0       	ldi	r24, 0x06	; 6
     bcc:	8c 83       	std	Y+4, r24	; 0x04
     bce:	1a 83       	std	Y+2, r17	; 0x02
     bd0:	09 83       	std	Y+1, r16	; 0x01
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	9f e7       	ldi	r25, 0x7F	; 127
     bd6:	9e 83       	std	Y+6, r25	; 0x06
     bd8:	8d 83       	std	Y+5, r24	; 0x05
     bda:	ae 01       	movw	r20, r28
     bdc:	47 5e       	subi	r20, 0xE7	; 231
     bde:	5f 4f       	sbci	r21, 0xFF	; 255
     be0:	6f 89       	ldd	r22, Y+23	; 0x17
     be2:	78 8d       	ldd	r23, Y+24	; 0x18
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	08 d0       	rcall	.+16     	; 0xbfa <vfprintf>
     bea:	ef 81       	ldd	r30, Y+7	; 0x07
     bec:	f8 85       	ldd	r31, Y+8	; 0x08
     bee:	e0 0f       	add	r30, r16
     bf0:	f1 1f       	adc	r31, r17
     bf2:	10 82       	st	Z, r1
     bf4:	2e 96       	adiw	r28, 0x0e	; 14
     bf6:	e4 e0       	ldi	r30, 0x04	; 4
     bf8:	ac c2       	rjmp	.+1368   	; 0x1152 <__epilogue_restores__+0x1c>

00000bfa <vfprintf>:
     bfa:	ab e0       	ldi	r26, 0x0B	; 11
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e2 e0       	ldi	r30, 0x02	; 2
     c00:	f6 e0       	ldi	r31, 0x06	; 6
     c02:	7d c2       	rjmp	.+1274   	; 0x10fe <__prologue_saves__>
     c04:	6c 01       	movw	r12, r24
     c06:	7b 01       	movw	r14, r22
     c08:	8a 01       	movw	r16, r20
     c0a:	fc 01       	movw	r30, r24
     c0c:	17 82       	std	Z+7, r1	; 0x07
     c0e:	16 82       	std	Z+6, r1	; 0x06
     c10:	83 81       	ldd	r24, Z+3	; 0x03
     c12:	81 ff       	sbrs	r24, 1
     c14:	bf c1       	rjmp	.+894    	; 0xf94 <vfprintf+0x39a>
     c16:	ce 01       	movw	r24, r28
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	3c 01       	movw	r6, r24
     c1c:	f6 01       	movw	r30, r12
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	f7 01       	movw	r30, r14
     c22:	93 fd       	sbrc	r25, 3
     c24:	85 91       	lpm	r24, Z+
     c26:	93 ff       	sbrs	r25, 3
     c28:	81 91       	ld	r24, Z+
     c2a:	7f 01       	movw	r14, r30
     c2c:	88 23       	and	r24, r24
     c2e:	09 f4       	brne	.+2      	; 0xc32 <vfprintf+0x38>
     c30:	ad c1       	rjmp	.+858    	; 0xf8c <vfprintf+0x392>
     c32:	85 32       	cpi	r24, 0x25	; 37
     c34:	39 f4       	brne	.+14     	; 0xc44 <vfprintf+0x4a>
     c36:	93 fd       	sbrc	r25, 3
     c38:	85 91       	lpm	r24, Z+
     c3a:	93 ff       	sbrs	r25, 3
     c3c:	81 91       	ld	r24, Z+
     c3e:	7f 01       	movw	r14, r30
     c40:	85 32       	cpi	r24, 0x25	; 37
     c42:	21 f4       	brne	.+8      	; 0xc4c <vfprintf+0x52>
     c44:	b6 01       	movw	r22, r12
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	c0 d1       	rcall	.+896    	; 0xfca <fputc>
     c4a:	e8 cf       	rjmp	.-48     	; 0xc1c <vfprintf+0x22>
     c4c:	91 2c       	mov	r9, r1
     c4e:	21 2c       	mov	r2, r1
     c50:	31 2c       	mov	r3, r1
     c52:	ff e1       	ldi	r31, 0x1F	; 31
     c54:	f3 15       	cp	r31, r3
     c56:	d8 f0       	brcs	.+54     	; 0xc8e <vfprintf+0x94>
     c58:	8b 32       	cpi	r24, 0x2B	; 43
     c5a:	79 f0       	breq	.+30     	; 0xc7a <vfprintf+0x80>
     c5c:	38 f4       	brcc	.+14     	; 0xc6c <vfprintf+0x72>
     c5e:	80 32       	cpi	r24, 0x20	; 32
     c60:	79 f0       	breq	.+30     	; 0xc80 <vfprintf+0x86>
     c62:	83 32       	cpi	r24, 0x23	; 35
     c64:	a1 f4       	brne	.+40     	; 0xc8e <vfprintf+0x94>
     c66:	23 2d       	mov	r18, r3
     c68:	20 61       	ori	r18, 0x10	; 16
     c6a:	1d c0       	rjmp	.+58     	; 0xca6 <vfprintf+0xac>
     c6c:	8d 32       	cpi	r24, 0x2D	; 45
     c6e:	61 f0       	breq	.+24     	; 0xc88 <vfprintf+0x8e>
     c70:	80 33       	cpi	r24, 0x30	; 48
     c72:	69 f4       	brne	.+26     	; 0xc8e <vfprintf+0x94>
     c74:	23 2d       	mov	r18, r3
     c76:	21 60       	ori	r18, 0x01	; 1
     c78:	16 c0       	rjmp	.+44     	; 0xca6 <vfprintf+0xac>
     c7a:	83 2d       	mov	r24, r3
     c7c:	82 60       	ori	r24, 0x02	; 2
     c7e:	38 2e       	mov	r3, r24
     c80:	e3 2d       	mov	r30, r3
     c82:	e4 60       	ori	r30, 0x04	; 4
     c84:	3e 2e       	mov	r3, r30
     c86:	2a c0       	rjmp	.+84     	; 0xcdc <vfprintf+0xe2>
     c88:	f3 2d       	mov	r31, r3
     c8a:	f8 60       	ori	r31, 0x08	; 8
     c8c:	1d c0       	rjmp	.+58     	; 0xcc8 <vfprintf+0xce>
     c8e:	37 fc       	sbrc	r3, 7
     c90:	2d c0       	rjmp	.+90     	; 0xcec <vfprintf+0xf2>
     c92:	20 ed       	ldi	r18, 0xD0	; 208
     c94:	28 0f       	add	r18, r24
     c96:	2a 30       	cpi	r18, 0x0A	; 10
     c98:	40 f0       	brcs	.+16     	; 0xcaa <vfprintf+0xb0>
     c9a:	8e 32       	cpi	r24, 0x2E	; 46
     c9c:	b9 f4       	brne	.+46     	; 0xccc <vfprintf+0xd2>
     c9e:	36 fc       	sbrc	r3, 6
     ca0:	75 c1       	rjmp	.+746    	; 0xf8c <vfprintf+0x392>
     ca2:	23 2d       	mov	r18, r3
     ca4:	20 64       	ori	r18, 0x40	; 64
     ca6:	32 2e       	mov	r3, r18
     ca8:	19 c0       	rjmp	.+50     	; 0xcdc <vfprintf+0xe2>
     caa:	36 fe       	sbrs	r3, 6
     cac:	06 c0       	rjmp	.+12     	; 0xcba <vfprintf+0xc0>
     cae:	8a e0       	ldi	r24, 0x0A	; 10
     cb0:	98 9e       	mul	r9, r24
     cb2:	20 0d       	add	r18, r0
     cb4:	11 24       	eor	r1, r1
     cb6:	92 2e       	mov	r9, r18
     cb8:	11 c0       	rjmp	.+34     	; 0xcdc <vfprintf+0xe2>
     cba:	ea e0       	ldi	r30, 0x0A	; 10
     cbc:	2e 9e       	mul	r2, r30
     cbe:	20 0d       	add	r18, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	22 2e       	mov	r2, r18
     cc4:	f3 2d       	mov	r31, r3
     cc6:	f0 62       	ori	r31, 0x20	; 32
     cc8:	3f 2e       	mov	r3, r31
     cca:	08 c0       	rjmp	.+16     	; 0xcdc <vfprintf+0xe2>
     ccc:	8c 36       	cpi	r24, 0x6C	; 108
     cce:	21 f4       	brne	.+8      	; 0xcd8 <vfprintf+0xde>
     cd0:	83 2d       	mov	r24, r3
     cd2:	80 68       	ori	r24, 0x80	; 128
     cd4:	38 2e       	mov	r3, r24
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <vfprintf+0xe2>
     cd8:	88 36       	cpi	r24, 0x68	; 104
     cda:	41 f4       	brne	.+16     	; 0xcec <vfprintf+0xf2>
     cdc:	f7 01       	movw	r30, r14
     cde:	93 fd       	sbrc	r25, 3
     ce0:	85 91       	lpm	r24, Z+
     ce2:	93 ff       	sbrs	r25, 3
     ce4:	81 91       	ld	r24, Z+
     ce6:	7f 01       	movw	r14, r30
     ce8:	81 11       	cpse	r24, r1
     cea:	b3 cf       	rjmp	.-154    	; 0xc52 <vfprintf+0x58>
     cec:	98 2f       	mov	r25, r24
     cee:	9f 7d       	andi	r25, 0xDF	; 223
     cf0:	95 54       	subi	r25, 0x45	; 69
     cf2:	93 30       	cpi	r25, 0x03	; 3
     cf4:	28 f4       	brcc	.+10     	; 0xd00 <vfprintf+0x106>
     cf6:	0c 5f       	subi	r16, 0xFC	; 252
     cf8:	1f 4f       	sbci	r17, 0xFF	; 255
     cfa:	9f e3       	ldi	r25, 0x3F	; 63
     cfc:	99 83       	std	Y+1, r25	; 0x01
     cfe:	0d c0       	rjmp	.+26     	; 0xd1a <vfprintf+0x120>
     d00:	83 36       	cpi	r24, 0x63	; 99
     d02:	31 f0       	breq	.+12     	; 0xd10 <vfprintf+0x116>
     d04:	83 37       	cpi	r24, 0x73	; 115
     d06:	71 f0       	breq	.+28     	; 0xd24 <vfprintf+0x12a>
     d08:	83 35       	cpi	r24, 0x53	; 83
     d0a:	09 f0       	breq	.+2      	; 0xd0e <vfprintf+0x114>
     d0c:	55 c0       	rjmp	.+170    	; 0xdb8 <vfprintf+0x1be>
     d0e:	20 c0       	rjmp	.+64     	; 0xd50 <vfprintf+0x156>
     d10:	f8 01       	movw	r30, r16
     d12:	80 81       	ld	r24, Z
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	0e 5f       	subi	r16, 0xFE	; 254
     d18:	1f 4f       	sbci	r17, 0xFF	; 255
     d1a:	88 24       	eor	r8, r8
     d1c:	83 94       	inc	r8
     d1e:	91 2c       	mov	r9, r1
     d20:	53 01       	movw	r10, r6
     d22:	12 c0       	rjmp	.+36     	; 0xd48 <vfprintf+0x14e>
     d24:	28 01       	movw	r4, r16
     d26:	f2 e0       	ldi	r31, 0x02	; 2
     d28:	4f 0e       	add	r4, r31
     d2a:	51 1c       	adc	r5, r1
     d2c:	f8 01       	movw	r30, r16
     d2e:	a0 80       	ld	r10, Z
     d30:	b1 80       	ldd	r11, Z+1	; 0x01
     d32:	36 fe       	sbrs	r3, 6
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <vfprintf+0x142>
     d36:	69 2d       	mov	r22, r9
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <vfprintf+0x146>
     d3c:	6f ef       	ldi	r22, 0xFF	; 255
     d3e:	7f ef       	ldi	r23, 0xFF	; 255
     d40:	c5 01       	movw	r24, r10
     d42:	38 d1       	rcall	.+624    	; 0xfb4 <strnlen>
     d44:	4c 01       	movw	r8, r24
     d46:	82 01       	movw	r16, r4
     d48:	f3 2d       	mov	r31, r3
     d4a:	ff 77       	andi	r31, 0x7F	; 127
     d4c:	3f 2e       	mov	r3, r31
     d4e:	15 c0       	rjmp	.+42     	; 0xd7a <vfprintf+0x180>
     d50:	28 01       	movw	r4, r16
     d52:	22 e0       	ldi	r18, 0x02	; 2
     d54:	42 0e       	add	r4, r18
     d56:	51 1c       	adc	r5, r1
     d58:	f8 01       	movw	r30, r16
     d5a:	a0 80       	ld	r10, Z
     d5c:	b1 80       	ldd	r11, Z+1	; 0x01
     d5e:	36 fe       	sbrs	r3, 6
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <vfprintf+0x16e>
     d62:	69 2d       	mov	r22, r9
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x172>
     d68:	6f ef       	ldi	r22, 0xFF	; 255
     d6a:	7f ef       	ldi	r23, 0xFF	; 255
     d6c:	c5 01       	movw	r24, r10
     d6e:	17 d1       	rcall	.+558    	; 0xf9e <strnlen_P>
     d70:	4c 01       	movw	r8, r24
     d72:	f3 2d       	mov	r31, r3
     d74:	f0 68       	ori	r31, 0x80	; 128
     d76:	3f 2e       	mov	r3, r31
     d78:	82 01       	movw	r16, r4
     d7a:	33 fc       	sbrc	r3, 3
     d7c:	19 c0       	rjmp	.+50     	; 0xdb0 <vfprintf+0x1b6>
     d7e:	82 2d       	mov	r24, r2
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	88 16       	cp	r8, r24
     d84:	99 06       	cpc	r9, r25
     d86:	a0 f4       	brcc	.+40     	; 0xdb0 <vfprintf+0x1b6>
     d88:	b6 01       	movw	r22, r12
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	1d d1       	rcall	.+570    	; 0xfca <fputc>
     d90:	2a 94       	dec	r2
     d92:	f5 cf       	rjmp	.-22     	; 0xd7e <vfprintf+0x184>
     d94:	f5 01       	movw	r30, r10
     d96:	37 fc       	sbrc	r3, 7
     d98:	85 91       	lpm	r24, Z+
     d9a:	37 fe       	sbrs	r3, 7
     d9c:	81 91       	ld	r24, Z+
     d9e:	5f 01       	movw	r10, r30
     da0:	b6 01       	movw	r22, r12
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	12 d1       	rcall	.+548    	; 0xfca <fputc>
     da6:	21 10       	cpse	r2, r1
     da8:	2a 94       	dec	r2
     daa:	21 e0       	ldi	r18, 0x01	; 1
     dac:	82 1a       	sub	r8, r18
     dae:	91 08       	sbc	r9, r1
     db0:	81 14       	cp	r8, r1
     db2:	91 04       	cpc	r9, r1
     db4:	79 f7       	brne	.-34     	; 0xd94 <vfprintf+0x19a>
     db6:	e1 c0       	rjmp	.+450    	; 0xf7a <vfprintf+0x380>
     db8:	84 36       	cpi	r24, 0x64	; 100
     dba:	11 f0       	breq	.+4      	; 0xdc0 <vfprintf+0x1c6>
     dbc:	89 36       	cpi	r24, 0x69	; 105
     dbe:	39 f5       	brne	.+78     	; 0xe0e <vfprintf+0x214>
     dc0:	f8 01       	movw	r30, r16
     dc2:	37 fe       	sbrs	r3, 7
     dc4:	07 c0       	rjmp	.+14     	; 0xdd4 <vfprintf+0x1da>
     dc6:	60 81       	ld	r22, Z
     dc8:	71 81       	ldd	r23, Z+1	; 0x01
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	93 81       	ldd	r25, Z+3	; 0x03
     dce:	0c 5f       	subi	r16, 0xFC	; 252
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255
     dd2:	08 c0       	rjmp	.+16     	; 0xde4 <vfprintf+0x1ea>
     dd4:	60 81       	ld	r22, Z
     dd6:	71 81       	ldd	r23, Z+1	; 0x01
     dd8:	07 2e       	mov	r0, r23
     dda:	00 0c       	add	r0, r0
     ddc:	88 0b       	sbc	r24, r24
     dde:	99 0b       	sbc	r25, r25
     de0:	0e 5f       	subi	r16, 0xFE	; 254
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	f3 2d       	mov	r31, r3
     de6:	ff 76       	andi	r31, 0x6F	; 111
     de8:	3f 2e       	mov	r3, r31
     dea:	97 ff       	sbrs	r25, 7
     dec:	09 c0       	rjmp	.+18     	; 0xe00 <vfprintf+0x206>
     dee:	90 95       	com	r25
     df0:	80 95       	com	r24
     df2:	70 95       	com	r23
     df4:	61 95       	neg	r22
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	8f 4f       	sbci	r24, 0xFF	; 255
     dfa:	9f 4f       	sbci	r25, 0xFF	; 255
     dfc:	f0 68       	ori	r31, 0x80	; 128
     dfe:	3f 2e       	mov	r3, r31
     e00:	2a e0       	ldi	r18, 0x0A	; 10
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	a3 01       	movw	r20, r6
     e06:	1d d1       	rcall	.+570    	; 0x1042 <__ultoa_invert>
     e08:	88 2e       	mov	r8, r24
     e0a:	86 18       	sub	r8, r6
     e0c:	44 c0       	rjmp	.+136    	; 0xe96 <vfprintf+0x29c>
     e0e:	85 37       	cpi	r24, 0x75	; 117
     e10:	31 f4       	brne	.+12     	; 0xe1e <vfprintf+0x224>
     e12:	23 2d       	mov	r18, r3
     e14:	2f 7e       	andi	r18, 0xEF	; 239
     e16:	b2 2e       	mov	r11, r18
     e18:	2a e0       	ldi	r18, 0x0A	; 10
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	25 c0       	rjmp	.+74     	; 0xe68 <vfprintf+0x26e>
     e1e:	93 2d       	mov	r25, r3
     e20:	99 7f       	andi	r25, 0xF9	; 249
     e22:	b9 2e       	mov	r11, r25
     e24:	8f 36       	cpi	r24, 0x6F	; 111
     e26:	c1 f0       	breq	.+48     	; 0xe58 <vfprintf+0x25e>
     e28:	18 f4       	brcc	.+6      	; 0xe30 <vfprintf+0x236>
     e2a:	88 35       	cpi	r24, 0x58	; 88
     e2c:	79 f0       	breq	.+30     	; 0xe4c <vfprintf+0x252>
     e2e:	ae c0       	rjmp	.+348    	; 0xf8c <vfprintf+0x392>
     e30:	80 37       	cpi	r24, 0x70	; 112
     e32:	19 f0       	breq	.+6      	; 0xe3a <vfprintf+0x240>
     e34:	88 37       	cpi	r24, 0x78	; 120
     e36:	21 f0       	breq	.+8      	; 0xe40 <vfprintf+0x246>
     e38:	a9 c0       	rjmp	.+338    	; 0xf8c <vfprintf+0x392>
     e3a:	e9 2f       	mov	r30, r25
     e3c:	e0 61       	ori	r30, 0x10	; 16
     e3e:	be 2e       	mov	r11, r30
     e40:	b4 fe       	sbrs	r11, 4
     e42:	0d c0       	rjmp	.+26     	; 0xe5e <vfprintf+0x264>
     e44:	fb 2d       	mov	r31, r11
     e46:	f4 60       	ori	r31, 0x04	; 4
     e48:	bf 2e       	mov	r11, r31
     e4a:	09 c0       	rjmp	.+18     	; 0xe5e <vfprintf+0x264>
     e4c:	34 fe       	sbrs	r3, 4
     e4e:	0a c0       	rjmp	.+20     	; 0xe64 <vfprintf+0x26a>
     e50:	29 2f       	mov	r18, r25
     e52:	26 60       	ori	r18, 0x06	; 6
     e54:	b2 2e       	mov	r11, r18
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <vfprintf+0x26a>
     e58:	28 e0       	ldi	r18, 0x08	; 8
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <vfprintf+0x26e>
     e5e:	20 e1       	ldi	r18, 0x10	; 16
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <vfprintf+0x26e>
     e64:	20 e1       	ldi	r18, 0x10	; 16
     e66:	32 e0       	ldi	r19, 0x02	; 2
     e68:	f8 01       	movw	r30, r16
     e6a:	b7 fe       	sbrs	r11, 7
     e6c:	07 c0       	rjmp	.+14     	; 0xe7c <vfprintf+0x282>
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	0c 5f       	subi	r16, 0xFC	; 252
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	06 c0       	rjmp	.+12     	; 0xe88 <vfprintf+0x28e>
     e7c:	60 81       	ld	r22, Z
     e7e:	71 81       	ldd	r23, Z+1	; 0x01
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 5f       	subi	r16, 0xFE	; 254
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	a3 01       	movw	r20, r6
     e8a:	db d0       	rcall	.+438    	; 0x1042 <__ultoa_invert>
     e8c:	88 2e       	mov	r8, r24
     e8e:	86 18       	sub	r8, r6
     e90:	fb 2d       	mov	r31, r11
     e92:	ff 77       	andi	r31, 0x7F	; 127
     e94:	3f 2e       	mov	r3, r31
     e96:	36 fe       	sbrs	r3, 6
     e98:	0d c0       	rjmp	.+26     	; 0xeb4 <vfprintf+0x2ba>
     e9a:	23 2d       	mov	r18, r3
     e9c:	2e 7f       	andi	r18, 0xFE	; 254
     e9e:	a2 2e       	mov	r10, r18
     ea0:	89 14       	cp	r8, r9
     ea2:	58 f4       	brcc	.+22     	; 0xeba <vfprintf+0x2c0>
     ea4:	34 fe       	sbrs	r3, 4
     ea6:	0b c0       	rjmp	.+22     	; 0xebe <vfprintf+0x2c4>
     ea8:	32 fc       	sbrc	r3, 2
     eaa:	09 c0       	rjmp	.+18     	; 0xebe <vfprintf+0x2c4>
     eac:	83 2d       	mov	r24, r3
     eae:	8e 7e       	andi	r24, 0xEE	; 238
     eb0:	a8 2e       	mov	r10, r24
     eb2:	05 c0       	rjmp	.+10     	; 0xebe <vfprintf+0x2c4>
     eb4:	b8 2c       	mov	r11, r8
     eb6:	a3 2c       	mov	r10, r3
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <vfprintf+0x2c6>
     eba:	b8 2c       	mov	r11, r8
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <vfprintf+0x2c6>
     ebe:	b9 2c       	mov	r11, r9
     ec0:	a4 fe       	sbrs	r10, 4
     ec2:	0f c0       	rjmp	.+30     	; 0xee2 <vfprintf+0x2e8>
     ec4:	fe 01       	movw	r30, r28
     ec6:	e8 0d       	add	r30, r8
     ec8:	f1 1d       	adc	r31, r1
     eca:	80 81       	ld	r24, Z
     ecc:	80 33       	cpi	r24, 0x30	; 48
     ece:	21 f4       	brne	.+8      	; 0xed8 <vfprintf+0x2de>
     ed0:	9a 2d       	mov	r25, r10
     ed2:	99 7e       	andi	r25, 0xE9	; 233
     ed4:	a9 2e       	mov	r10, r25
     ed6:	09 c0       	rjmp	.+18     	; 0xeea <vfprintf+0x2f0>
     ed8:	a2 fe       	sbrs	r10, 2
     eda:	06 c0       	rjmp	.+12     	; 0xee8 <vfprintf+0x2ee>
     edc:	b3 94       	inc	r11
     ede:	b3 94       	inc	r11
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <vfprintf+0x2f0>
     ee2:	8a 2d       	mov	r24, r10
     ee4:	86 78       	andi	r24, 0x86	; 134
     ee6:	09 f0       	breq	.+2      	; 0xeea <vfprintf+0x2f0>
     ee8:	b3 94       	inc	r11
     eea:	a3 fc       	sbrc	r10, 3
     eec:	10 c0       	rjmp	.+32     	; 0xf0e <vfprintf+0x314>
     eee:	a0 fe       	sbrs	r10, 0
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <vfprintf+0x304>
     ef2:	b2 14       	cp	r11, r2
     ef4:	80 f4       	brcc	.+32     	; 0xf16 <vfprintf+0x31c>
     ef6:	28 0c       	add	r2, r8
     ef8:	92 2c       	mov	r9, r2
     efa:	9b 18       	sub	r9, r11
     efc:	0d c0       	rjmp	.+26     	; 0xf18 <vfprintf+0x31e>
     efe:	b2 14       	cp	r11, r2
     f00:	58 f4       	brcc	.+22     	; 0xf18 <vfprintf+0x31e>
     f02:	b6 01       	movw	r22, r12
     f04:	80 e2       	ldi	r24, 0x20	; 32
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	60 d0       	rcall	.+192    	; 0xfca <fputc>
     f0a:	b3 94       	inc	r11
     f0c:	f8 cf       	rjmp	.-16     	; 0xefe <vfprintf+0x304>
     f0e:	b2 14       	cp	r11, r2
     f10:	18 f4       	brcc	.+6      	; 0xf18 <vfprintf+0x31e>
     f12:	2b 18       	sub	r2, r11
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x320>
     f16:	98 2c       	mov	r9, r8
     f18:	21 2c       	mov	r2, r1
     f1a:	a4 fe       	sbrs	r10, 4
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <vfprintf+0x342>
     f1e:	b6 01       	movw	r22, r12
     f20:	80 e3       	ldi	r24, 0x30	; 48
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	52 d0       	rcall	.+164    	; 0xfca <fputc>
     f26:	a2 fe       	sbrs	r10, 2
     f28:	16 c0       	rjmp	.+44     	; 0xf56 <vfprintf+0x35c>
     f2a:	a1 fc       	sbrc	r10, 1
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <vfprintf+0x33a>
     f2e:	88 e7       	ldi	r24, 0x78	; 120
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <vfprintf+0x33e>
     f34:	88 e5       	ldi	r24, 0x58	; 88
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	b6 01       	movw	r22, r12
     f3a:	0c c0       	rjmp	.+24     	; 0xf54 <vfprintf+0x35a>
     f3c:	8a 2d       	mov	r24, r10
     f3e:	86 78       	andi	r24, 0x86	; 134
     f40:	51 f0       	breq	.+20     	; 0xf56 <vfprintf+0x35c>
     f42:	a1 fe       	sbrs	r10, 1
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0x350>
     f46:	8b e2       	ldi	r24, 0x2B	; 43
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <vfprintf+0x352>
     f4a:	80 e2       	ldi	r24, 0x20	; 32
     f4c:	a7 fc       	sbrc	r10, 7
     f4e:	8d e2       	ldi	r24, 0x2D	; 45
     f50:	b6 01       	movw	r22, r12
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	3a d0       	rcall	.+116    	; 0xfca <fputc>
     f56:	89 14       	cp	r8, r9
     f58:	30 f4       	brcc	.+12     	; 0xf66 <vfprintf+0x36c>
     f5a:	b6 01       	movw	r22, r12
     f5c:	80 e3       	ldi	r24, 0x30	; 48
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	34 d0       	rcall	.+104    	; 0xfca <fputc>
     f62:	9a 94       	dec	r9
     f64:	f8 cf       	rjmp	.-16     	; 0xf56 <vfprintf+0x35c>
     f66:	8a 94       	dec	r8
     f68:	f3 01       	movw	r30, r6
     f6a:	e8 0d       	add	r30, r8
     f6c:	f1 1d       	adc	r31, r1
     f6e:	80 81       	ld	r24, Z
     f70:	b6 01       	movw	r22, r12
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	2a d0       	rcall	.+84     	; 0xfca <fputc>
     f76:	81 10       	cpse	r8, r1
     f78:	f6 cf       	rjmp	.-20     	; 0xf66 <vfprintf+0x36c>
     f7a:	22 20       	and	r2, r2
     f7c:	09 f4       	brne	.+2      	; 0xf80 <vfprintf+0x386>
     f7e:	4e ce       	rjmp	.-868    	; 0xc1c <vfprintf+0x22>
     f80:	b6 01       	movw	r22, r12
     f82:	80 e2       	ldi	r24, 0x20	; 32
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	21 d0       	rcall	.+66     	; 0xfca <fputc>
     f88:	2a 94       	dec	r2
     f8a:	f7 cf       	rjmp	.-18     	; 0xf7a <vfprintf+0x380>
     f8c:	f6 01       	movw	r30, r12
     f8e:	86 81       	ldd	r24, Z+6	; 0x06
     f90:	97 81       	ldd	r25, Z+7	; 0x07
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <vfprintf+0x39e>
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	9f ef       	ldi	r25, 0xFF	; 255
     f98:	2b 96       	adiw	r28, 0x0b	; 11
     f9a:	e2 e1       	ldi	r30, 0x12	; 18
     f9c:	cc c0       	rjmp	.+408    	; 0x1136 <__epilogue_restores__>

00000f9e <strnlen_P>:
     f9e:	fc 01       	movw	r30, r24
     fa0:	05 90       	lpm	r0, Z+
     fa2:	61 50       	subi	r22, 0x01	; 1
     fa4:	70 40       	sbci	r23, 0x00	; 0
     fa6:	01 10       	cpse	r0, r1
     fa8:	d8 f7       	brcc	.-10     	; 0xfa0 <strnlen_P+0x2>
     faa:	80 95       	com	r24
     fac:	90 95       	com	r25
     fae:	8e 0f       	add	r24, r30
     fb0:	9f 1f       	adc	r25, r31
     fb2:	08 95       	ret

00000fb4 <strnlen>:
     fb4:	fc 01       	movw	r30, r24
     fb6:	61 50       	subi	r22, 0x01	; 1
     fb8:	70 40       	sbci	r23, 0x00	; 0
     fba:	01 90       	ld	r0, Z+
     fbc:	01 10       	cpse	r0, r1
     fbe:	d8 f7       	brcc	.-10     	; 0xfb6 <strnlen+0x2>
     fc0:	80 95       	com	r24
     fc2:	90 95       	com	r25
     fc4:	8e 0f       	add	r24, r30
     fc6:	9f 1f       	adc	r25, r31
     fc8:	08 95       	ret

00000fca <fputc>:
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	fb 01       	movw	r30, r22
     fd4:	23 81       	ldd	r18, Z+3	; 0x03
     fd6:	21 fd       	sbrc	r18, 1
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <fputc+0x16>
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	9f ef       	ldi	r25, 0xFF	; 255
     fde:	2c c0       	rjmp	.+88     	; 0x1038 <fputc+0x6e>
     fe0:	22 ff       	sbrs	r18, 2
     fe2:	16 c0       	rjmp	.+44     	; 0x1010 <fputc+0x46>
     fe4:	46 81       	ldd	r20, Z+6	; 0x06
     fe6:	57 81       	ldd	r21, Z+7	; 0x07
     fe8:	24 81       	ldd	r18, Z+4	; 0x04
     fea:	35 81       	ldd	r19, Z+5	; 0x05
     fec:	42 17       	cp	r20, r18
     fee:	53 07       	cpc	r21, r19
     ff0:	44 f4       	brge	.+16     	; 0x1002 <fputc+0x38>
     ff2:	a0 81       	ld	r26, Z
     ff4:	b1 81       	ldd	r27, Z+1	; 0x01
     ff6:	9d 01       	movw	r18, r26
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	31 83       	std	Z+1, r19	; 0x01
     ffe:	20 83       	st	Z, r18
    1000:	8c 93       	st	X, r24
    1002:	26 81       	ldd	r18, Z+6	; 0x06
    1004:	37 81       	ldd	r19, Z+7	; 0x07
    1006:	2f 5f       	subi	r18, 0xFF	; 255
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	37 83       	std	Z+7, r19	; 0x07
    100c:	26 83       	std	Z+6, r18	; 0x06
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <fputc+0x6e>
    1010:	8b 01       	movw	r16, r22
    1012:	ec 01       	movw	r28, r24
    1014:	fb 01       	movw	r30, r22
    1016:	00 84       	ldd	r0, Z+8	; 0x08
    1018:	f1 85       	ldd	r31, Z+9	; 0x09
    101a:	e0 2d       	mov	r30, r0
    101c:	09 95       	icall
    101e:	89 2b       	or	r24, r25
    1020:	e1 f6       	brne	.-72     	; 0xfda <fputc+0x10>
    1022:	d8 01       	movw	r26, r16
    1024:	16 96       	adiw	r26, 0x06	; 6
    1026:	8d 91       	ld	r24, X+
    1028:	9c 91       	ld	r25, X
    102a:	17 97       	sbiw	r26, 0x07	; 7
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	17 96       	adiw	r26, 0x07	; 7
    1030:	9c 93       	st	X, r25
    1032:	8e 93       	st	-X, r24
    1034:	16 97       	sbiw	r26, 0x06	; 6
    1036:	ce 01       	movw	r24, r28
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	08 95       	ret

00001042 <__ultoa_invert>:
    1042:	fa 01       	movw	r30, r20
    1044:	aa 27       	eor	r26, r26
    1046:	28 30       	cpi	r18, 0x08	; 8
    1048:	51 f1       	breq	.+84     	; 0x109e <__ultoa_invert+0x5c>
    104a:	20 31       	cpi	r18, 0x10	; 16
    104c:	81 f1       	breq	.+96     	; 0x10ae <__ultoa_invert+0x6c>
    104e:	e8 94       	clt
    1050:	6f 93       	push	r22
    1052:	6e 7f       	andi	r22, 0xFE	; 254
    1054:	6e 5f       	subi	r22, 0xFE	; 254
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	8f 4f       	sbci	r24, 0xFF	; 255
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	af 4f       	sbci	r26, 0xFF	; 255
    105e:	b1 e0       	ldi	r27, 0x01	; 1
    1060:	3e d0       	rcall	.+124    	; 0x10de <__ultoa_invert+0x9c>
    1062:	b4 e0       	ldi	r27, 0x04	; 4
    1064:	3c d0       	rcall	.+120    	; 0x10de <__ultoa_invert+0x9c>
    1066:	67 0f       	add	r22, r23
    1068:	78 1f       	adc	r23, r24
    106a:	89 1f       	adc	r24, r25
    106c:	9a 1f       	adc	r25, r26
    106e:	a1 1d       	adc	r26, r1
    1070:	68 0f       	add	r22, r24
    1072:	79 1f       	adc	r23, r25
    1074:	8a 1f       	adc	r24, r26
    1076:	91 1d       	adc	r25, r1
    1078:	a1 1d       	adc	r26, r1
    107a:	6a 0f       	add	r22, r26
    107c:	71 1d       	adc	r23, r1
    107e:	81 1d       	adc	r24, r1
    1080:	91 1d       	adc	r25, r1
    1082:	a1 1d       	adc	r26, r1
    1084:	20 d0       	rcall	.+64     	; 0x10c6 <__ultoa_invert+0x84>
    1086:	09 f4       	brne	.+2      	; 0x108a <__ultoa_invert+0x48>
    1088:	68 94       	set
    108a:	3f 91       	pop	r19
    108c:	2a e0       	ldi	r18, 0x0A	; 10
    108e:	26 9f       	mul	r18, r22
    1090:	11 24       	eor	r1, r1
    1092:	30 19       	sub	r19, r0
    1094:	30 5d       	subi	r19, 0xD0	; 208
    1096:	31 93       	st	Z+, r19
    1098:	de f6       	brtc	.-74     	; 0x1050 <__ultoa_invert+0xe>
    109a:	cf 01       	movw	r24, r30
    109c:	08 95       	ret
    109e:	46 2f       	mov	r20, r22
    10a0:	47 70       	andi	r20, 0x07	; 7
    10a2:	40 5d       	subi	r20, 0xD0	; 208
    10a4:	41 93       	st	Z+, r20
    10a6:	b3 e0       	ldi	r27, 0x03	; 3
    10a8:	0f d0       	rcall	.+30     	; 0x10c8 <__ultoa_invert+0x86>
    10aa:	c9 f7       	brne	.-14     	; 0x109e <__ultoa_invert+0x5c>
    10ac:	f6 cf       	rjmp	.-20     	; 0x109a <__ultoa_invert+0x58>
    10ae:	46 2f       	mov	r20, r22
    10b0:	4f 70       	andi	r20, 0x0F	; 15
    10b2:	40 5d       	subi	r20, 0xD0	; 208
    10b4:	4a 33       	cpi	r20, 0x3A	; 58
    10b6:	18 f0       	brcs	.+6      	; 0x10be <__ultoa_invert+0x7c>
    10b8:	49 5d       	subi	r20, 0xD9	; 217
    10ba:	31 fd       	sbrc	r19, 1
    10bc:	40 52       	subi	r20, 0x20	; 32
    10be:	41 93       	st	Z+, r20
    10c0:	02 d0       	rcall	.+4      	; 0x10c6 <__ultoa_invert+0x84>
    10c2:	a9 f7       	brne	.-22     	; 0x10ae <__ultoa_invert+0x6c>
    10c4:	ea cf       	rjmp	.-44     	; 0x109a <__ultoa_invert+0x58>
    10c6:	b4 e0       	ldi	r27, 0x04	; 4
    10c8:	a6 95       	lsr	r26
    10ca:	97 95       	ror	r25
    10cc:	87 95       	ror	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	ba 95       	dec	r27
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__ultoa_invert+0x86>
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	61 05       	cpc	r22, r1
    10da:	71 05       	cpc	r23, r1
    10dc:	08 95       	ret
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	0a 2e       	mov	r0, r26
    10e4:	06 94       	lsr	r0
    10e6:	57 95       	ror	r21
    10e8:	47 95       	ror	r20
    10ea:	37 95       	ror	r19
    10ec:	27 95       	ror	r18
    10ee:	ba 95       	dec	r27
    10f0:	c9 f7       	brne	.-14     	; 0x10e4 <__ultoa_invert+0xa2>
    10f2:	62 0f       	add	r22, r18
    10f4:	73 1f       	adc	r23, r19
    10f6:	84 1f       	adc	r24, r20
    10f8:	95 1f       	adc	r25, r21
    10fa:	a0 1d       	adc	r26, r0
    10fc:	08 95       	ret

000010fe <__prologue_saves__>:
    10fe:	2f 92       	push	r2
    1100:	3f 92       	push	r3
    1102:	4f 92       	push	r4
    1104:	5f 92       	push	r5
    1106:	6f 92       	push	r6
    1108:	7f 92       	push	r7
    110a:	8f 92       	push	r8
    110c:	9f 92       	push	r9
    110e:	af 92       	push	r10
    1110:	bf 92       	push	r11
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	ca 1b       	sub	r28, r26
    1128:	db 0b       	sbc	r29, r27
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	09 94       	ijmp

00001136 <__epilogue_restores__>:
    1136:	2a 88       	ldd	r2, Y+18	; 0x12
    1138:	39 88       	ldd	r3, Y+17	; 0x11
    113a:	48 88       	ldd	r4, Y+16	; 0x10
    113c:	5f 84       	ldd	r5, Y+15	; 0x0f
    113e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1140:	7d 84       	ldd	r7, Y+13	; 0x0d
    1142:	8c 84       	ldd	r8, Y+12	; 0x0c
    1144:	9b 84       	ldd	r9, Y+11	; 0x0b
    1146:	aa 84       	ldd	r10, Y+10	; 0x0a
    1148:	b9 84       	ldd	r11, Y+9	; 0x09
    114a:	c8 84       	ldd	r12, Y+8	; 0x08
    114c:	df 80       	ldd	r13, Y+7	; 0x07
    114e:	ee 80       	ldd	r14, Y+6	; 0x06
    1150:	fd 80       	ldd	r15, Y+5	; 0x05
    1152:	0c 81       	ldd	r16, Y+4	; 0x04
    1154:	1b 81       	ldd	r17, Y+3	; 0x03
    1156:	aa 81       	ldd	r26, Y+2	; 0x02
    1158:	b9 81       	ldd	r27, Y+1	; 0x01
    115a:	ce 0f       	add	r28, r30
    115c:	d1 1d       	adc	r29, r1
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	ed 01       	movw	r28, r26
    116a:	08 95       	ret

0000116c <_exit>:
    116c:	f8 94       	cli

0000116e <__stop_program>:
    116e:	ff cf       	rjmp	.-2      	; 0x116e <__stop_program>
