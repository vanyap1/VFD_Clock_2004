
VFD_Clock_2004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000108c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  0000108c  00001120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000104  008000e6  008000e6  000011a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001de6  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd8  00000000  00000000  0000324e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001290  00000000  00000000  00004026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  000052b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088e  00000000  00000000  00005804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001453  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000074e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	50 c1       	rjmp	.+672    	; 0x2b0 <__vector_7>
      10:	45 c1       	rjmp	.+650    	; 0x29c <__vector_8>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	c4 c2       	rjmp	.+1416   	; 0x5a0 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	f8 c2       	rjmp	.+1520   	; 0x60c <__vector_13>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	e6 c1       	rjmp	.+972    	; 0x3f0 <__vector_17>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ec e8       	ldi	r30, 0x8C	; 140
      3a:	f0 e1       	ldi	r31, 0x10	; 16
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a6 3e       	cpi	r26, 0xE6	; 230
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	a6 ee       	ldi	r26, 0xE6	; 230
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	aa 3e       	cpi	r26, 0xEA	; 234
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	11 d4       	rcall	.+2082   	; 0x87c <main>
      5a:	16 c8       	rjmp	.-4052   	; 0xfffff088 <__eeprom_end+0xff7ef088>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <set_pin_level>:
*/


void set_pin_level(gpio *GPIOx , const bool level)
{
	if (level) {
      5e:	66 23       	and	r22, r22
      60:	99 f0       	breq	.+38     	; 0x88 <set_pin_level+0x2a>
		*GPIOx->port |= 1 << GPIOx->pin;
      62:	dc 01       	movw	r26, r24
      64:	ed 91       	ld	r30, X+
      66:	fc 91       	ld	r31, X
      68:	11 97       	sbiw	r26, 0x01	; 1
      6a:	21 e0       	ldi	r18, 0x01	; 1
      6c:	30 e0       	ldi	r19, 0x00	; 0
      6e:	a9 01       	movw	r20, r18
      70:	12 96       	adiw	r26, 0x02	; 2
      72:	0c 90       	ld	r0, X
      74:	02 c0       	rjmp	.+4      	; 0x7a <set_pin_level+0x1c>
      76:	44 0f       	add	r20, r20
      78:	55 1f       	adc	r21, r21
      7a:	0a 94       	dec	r0
      7c:	e2 f7       	brpl	.-8      	; 0x76 <set_pin_level+0x18>
      7e:	ca 01       	movw	r24, r20
      80:	90 81       	ld	r25, Z
      82:	89 2b       	or	r24, r25
      84:	80 83       	st	Z, r24
      86:	08 95       	ret
		} else {
		*GPIOx->port &= ~(1 << GPIOx->pin);
      88:	dc 01       	movw	r26, r24
      8a:	ed 91       	ld	r30, X+
      8c:	fc 91       	ld	r31, X
      8e:	11 97       	sbiw	r26, 0x01	; 1
      90:	21 e0       	ldi	r18, 0x01	; 1
      92:	30 e0       	ldi	r19, 0x00	; 0
      94:	a9 01       	movw	r20, r18
      96:	12 96       	adiw	r26, 0x02	; 2
      98:	0c 90       	ld	r0, X
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <set_pin_level+0x42>
      9c:	44 0f       	add	r20, r20
      9e:	55 1f       	adc	r21, r21
      a0:	0a 94       	dec	r0
      a2:	e2 f7       	brpl	.-8      	; 0x9c <set_pin_level+0x3e>
      a4:	ca 01       	movw	r24, r20
      a6:	80 95       	com	r24
      a8:	90 81       	ld	r25, Z
      aa:	89 23       	and	r24, r25
      ac:	80 83       	st	Z, r24
      ae:	08 95       	ret

000000b0 <set_pin_dir>:
	}
}

void set_pin_dir(gpio *GPIOx, const enum port_dir direction)
{
      b0:	fc 01       	movw	r30, r24
	uint8_t *tmp_port = GPIOx->port-1;
      b2:	30 81       	ld	r19, Z
      b4:	21 81       	ldd	r18, Z+1	; 0x01
	switch (direction) {
      b6:	61 30       	cpi	r22, 0x01	; 1
      b8:	99 f0       	breq	.+38     	; 0xe0 <set_pin_dir+0x30>
      ba:	18 f0       	brcs	.+6      	; 0xc2 <set_pin_dir+0x12>
      bc:	62 30       	cpi	r22, 0x02	; 2
      be:	f1 f0       	breq	.+60     	; 0xfc <set_pin_dir+0x4c>
      c0:	08 95       	ret
		case PORT_DIR_IN:
		*tmp_port &= ~(1 << GPIOx->pin);
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	02 80       	ldd	r0, Z+2	; 0x02
      c8:	02 c0       	rjmp	.+4      	; 0xce <set_pin_dir+0x1e>
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	0a 94       	dec	r0
      d0:	e2 f7       	brpl	.-8      	; 0xca <set_pin_dir+0x1a>
      d2:	e3 2f       	mov	r30, r19
      d4:	f2 2f       	mov	r31, r18
      d6:	80 95       	com	r24
      d8:	92 91       	ld	r25, -Z
      da:	89 23       	and	r24, r25
      dc:	80 83       	st	Z, r24
		break;
      de:	08 95       	ret
		case PORT_DIR_OUT:
		*tmp_port |= 1 << GPIOx->pin;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	02 80       	ldd	r0, Z+2	; 0x02
      e6:	02 c0       	rjmp	.+4      	; 0xec <set_pin_dir+0x3c>
      e8:	88 0f       	add	r24, r24
      ea:	99 1f       	adc	r25, r25
      ec:	0a 94       	dec	r0
      ee:	e2 f7       	brpl	.-8      	; 0xe8 <set_pin_dir+0x38>
      f0:	e3 2f       	mov	r30, r19
      f2:	f2 2f       	mov	r31, r18
      f4:	92 91       	ld	r25, -Z
      f6:	89 2b       	or	r24, r25
      f8:	80 83       	st	Z, r24
		break;
      fa:	08 95       	ret
		case PORT_DIR_OFF:
		*tmp_port &= ~(1 << GPIOx->pin);
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	ac 01       	movw	r20, r24
     102:	02 80       	ldd	r0, Z+2	; 0x02
     104:	02 c0       	rjmp	.+4      	; 0x10a <set_pin_dir+0x5a>
     106:	44 0f       	add	r20, r20
     108:	55 1f       	adc	r21, r21
     10a:	0a 94       	dec	r0
     10c:	e2 f7       	brpl	.-8      	; 0x106 <set_pin_dir+0x56>
     10e:	a3 2f       	mov	r26, r19
     110:	b2 2f       	mov	r27, r18
     112:	40 95       	com	r20
     114:	2e 91       	ld	r18, -X
     116:	42 23       	and	r20, r18
     118:	4c 93       	st	X, r20
		*GPIOx->port &= ~(1 << GPIOx->pin);
     11a:	a0 81       	ld	r26, Z
     11c:	b1 81       	ldd	r27, Z+1	; 0x01
     11e:	02 80       	ldd	r0, Z+2	; 0x02
     120:	02 c0       	rjmp	.+4      	; 0x126 <set_pin_dir+0x76>
     122:	88 0f       	add	r24, r24
     124:	99 1f       	adc	r25, r25
     126:	0a 94       	dec	r0
     128:	e2 f7       	brpl	.-8      	; 0x122 <set_pin_dir+0x72>
     12a:	80 95       	com	r24
     12c:	9c 91       	ld	r25, X
     12e:	89 23       	and	r24, r25
     130:	8c 93       	st	X, r24
     132:	08 95       	ret

00000134 <rtc_int_enable>:
};



void rtc_int_enable(rtc_date *RTCx , const uint16_t int_time){
	rtc_config_3[0] |= (1 << TIE);
     134:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <__data_end>
     138:	80 61       	ori	r24, 0x10	; 16
     13a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__data_end>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
     13e:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <rtc_config_2>
     142:	81 61       	ori	r24, 0x11	; 17
     144:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <rtc_config_2>
	
	twi_write(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
     148:	22 e0       	ldi	r18, 0x02	; 2
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e6       	ldi	r20, 0x60	; 96
     14e:	50 e0       	ldi	r21, 0x00	; 0
     150:	6b e0       	ldi	r22, 0x0B	; 11
     152:	82 e3       	ldi	r24, 0x32	; 50
     154:	c4 d1       	rcall	.+904    	; 0x4de <twi_write>
	twi_write(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
     156:	21 e0       	ldi	r18, 0x01	; 1
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	47 ee       	ldi	r20, 0xE7	; 231
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	6d e0       	ldi	r22, 0x0D	; 13
     160:	82 e3       	ldi	r24, 0x32	; 50
     162:	bd d1       	rcall	.+890    	; 0x4de <twi_write>
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
     164:	21 e0       	ldi	r18, 0x01	; 1
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	46 ee       	ldi	r20, 0xE6	; 230
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	6f e0       	ldi	r22, 0x0F	; 15
     16e:	82 e3       	ldi	r24, 0x32	; 50
     170:	b6 d1       	rcall	.+876    	; 0x4de <twi_write>
     172:	08 95       	ret

00000174 <BCDtoDEC>:
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
     174:	98 2f       	mov	r25, r24
     176:	92 95       	swap	r25
     178:	9f 70       	andi	r25, 0x0F	; 15
     17a:	99 0f       	add	r25, r25
     17c:	29 2f       	mov	r18, r25
     17e:	22 0f       	add	r18, r18
     180:	22 0f       	add	r18, r18
     182:	92 0f       	add	r25, r18
     184:	8f 70       	andi	r24, 0x0F	; 15
}
     186:	89 0f       	add	r24, r25
     188:	08 95       	ret

0000018a <rtc_sync>:
	twi_write(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
	
	
}

void rtc_sync(rtc_date *RTCx){
     18a:	0f 93       	push	r16
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	27 97       	sbiw	r28, 0x07	; 7
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	f8 94       	cli
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	cd bf       	out	0x3d, r28	; 61
     1a2:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	twi_read(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
     1a4:	27 e0       	ldi	r18, 0x07	; 7
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	ae 01       	movw	r20, r28
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	82 e3       	ldi	r24, 0x32	; 50
     1b2:	2e d1       	rcall	.+604    	; 0x410 <twi_read>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	de df       	rcall	.-68     	; 0x174 <BCDtoDEC>
     1b8:	f8 01       	movw	r30, r16
     1ba:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
     1bc:	8a 81       	ldd	r24, Y+2	; 0x02
     1be:	da df       	rcall	.-76     	; 0x174 <BCDtoDEC>
     1c0:	f8 01       	movw	r30, r16
     1c2:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
     1c4:	8b 81       	ldd	r24, Y+3	; 0x03
     1c6:	d6 df       	rcall	.-84     	; 0x174 <BCDtoDEC>
     1c8:	f8 01       	movw	r30, r16
     1ca:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
     1cc:	8c 81       	ldd	r24, Y+4	; 0x04
     1ce:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
     1d0:	8d 81       	ldd	r24, Y+5	; 0x05
     1d2:	d0 df       	rcall	.-96     	; 0x174 <BCDtoDEC>
     1d4:	f8 01       	movw	r30, r16
     1d6:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
     1d8:	8e 81       	ldd	r24, Y+6	; 0x06
     1da:	cc df       	rcall	.-104    	; 0x174 <BCDtoDEC>
     1dc:	f8 01       	movw	r30, r16
     1de:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6]);
     1e0:	8f 81       	ldd	r24, Y+7	; 0x07
     1e2:	c8 df       	rcall	.-112    	; 0x174 <BCDtoDEC>
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	f8 01       	movw	r30, r16
     1e8:	96 83       	std	Z+6, r25	; 0x06
     1ea:	85 83       	std	Z+5, r24	; 0x05
}
     1ec:	27 96       	adiw	r28, 0x07	; 7
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	1f 91       	pop	r17
     1fe:	0f 91       	pop	r16
     200:	08 95       	ret

00000202 <DECtoBCD>:
}

// BCDtoDEC -- convert decimal to binary-coded decimal (BCD)
uint8_t DECtoBCD(uint8_t val)
{
	return ((val / 10) * 0x10) + (val % 10);
     202:	9d ec       	ldi	r25, 0xCD	; 205
     204:	89 9f       	mul	r24, r25
     206:	91 2d       	mov	r25, r1
     208:	11 24       	eor	r1, r1
     20a:	96 95       	lsr	r25
     20c:	96 95       	lsr	r25
     20e:	96 95       	lsr	r25
     210:	39 2f       	mov	r19, r25
     212:	33 0f       	add	r19, r19
     214:	23 2f       	mov	r18, r19
     216:	22 0f       	add	r18, r18
     218:	22 0f       	add	r18, r18
     21a:	23 0f       	add	r18, r19
     21c:	82 1b       	sub	r24, r18
}
     21e:	20 e1       	ldi	r18, 0x10	; 16
     220:	92 9f       	mul	r25, r18
     222:	80 0d       	add	r24, r0
     224:	11 24       	eor	r1, r1
     226:	08 95       	ret

00000228 <rtc_set>:
	RTCx->dayofweek=rtc_raw[3];
	RTCx->date=BCDtoDEC(rtc_raw[4]);
	RTCx->month=BCDtoDEC(rtc_raw[5]);
	RTCx->year=BCDtoDEC(rtc_raw[6]);
}
void rtc_set(rtc_date *RTCx){
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	27 97       	sbiw	r28, 0x07	; 7
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	rtc_raw[0]=DECtoBCD(RTCx->second);
     242:	fc 01       	movw	r30, r24
     244:	80 81       	ld	r24, Z
     246:	dd df       	rcall	.-70     	; 0x202 <DECtoBCD>
     248:	89 83       	std	Y+1, r24	; 0x01
	rtc_raw[1]=DECtoBCD(RTCx->minute);
     24a:	f8 01       	movw	r30, r16
     24c:	81 81       	ldd	r24, Z+1	; 0x01
     24e:	d9 df       	rcall	.-78     	; 0x202 <DECtoBCD>
     250:	8a 83       	std	Y+2, r24	; 0x02
	rtc_raw[2]=DECtoBCD(RTCx->hour);
     252:	f8 01       	movw	r30, r16
     254:	82 81       	ldd	r24, Z+2	; 0x02
     256:	d5 df       	rcall	.-86     	; 0x202 <DECtoBCD>
     258:	8b 83       	std	Y+3, r24	; 0x03
	rtc_raw[3]=RTCx->dayofweek;
     25a:	f8 01       	movw	r30, r16
     25c:	87 81       	ldd	r24, Z+7	; 0x07
     25e:	8c 83       	std	Y+4, r24	; 0x04
	rtc_raw[4]=DECtoBCD(RTCx->date);
     260:	83 81       	ldd	r24, Z+3	; 0x03
     262:	cf df       	rcall	.-98     	; 0x202 <DECtoBCD>
     264:	8d 83       	std	Y+5, r24	; 0x05
	rtc_raw[5]=DECtoBCD(RTCx->month);
     266:	f8 01       	movw	r30, r16
     268:	84 81       	ldd	r24, Z+4	; 0x04
     26a:	cb df       	rcall	.-106    	; 0x202 <DECtoBCD>
     26c:	8e 83       	std	Y+6, r24	; 0x06
	rtc_raw[6]=DECtoBCD(RTCx->year);
     26e:	f8 01       	movw	r30, r16
     270:	85 81       	ldd	r24, Z+5	; 0x05
     272:	c7 df       	rcall	.-114    	; 0x202 <DECtoBCD>
     274:	8f 83       	std	Y+7, r24	; 0x07
	twi_write(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
     276:	27 e0       	ldi	r18, 0x07	; 7
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	ae 01       	movw	r20, r28
     27c:	4f 5f       	subi	r20, 0xFF	; 255
     27e:	5f 4f       	sbci	r21, 0xFF	; 255
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	82 e3       	ldi	r24, 0x32	; 50
     284:	2c d1       	rcall	.+600    	; 0x4de <twi_write>
}
     286:	27 96       	adiw	r28, 0x07	; 7
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	08 95       	ret

0000029c <__vector_8>:
}

uint8_t timer_status(void){
	return timer_counter;
	//sei();
}
     29c:	1f 92       	push	r1
     29e:	0f 92       	push	r0
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	0f 92       	push	r0
     2a4:	11 24       	eor	r1, r1
     2a6:	0f 90       	pop	r0
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	0f 90       	pop	r0
     2ac:	1f 90       	pop	r1
     2ae:	18 95       	reti

000002b0 <__vector_7>:
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	0f 90       	pop	r0
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	0f 90       	pop	r0
     2c0:	1f 90       	pop	r1
     2c2:	18 95       	reti

000002c4 <timer1_init>:

void timer1_init(uint16_t counter_reg){
	sei();
     2c4:	78 94       	sei
	DDRB = DDRB | (0b1 << PORTB1)|(0b1 << PORTB2);
     2c6:	87 b3       	in	r24, 0x17	; 23
     2c8:	86 60       	ori	r24, 0x06	; 6
     2ca:	87 bb       	out	0x17, r24	; 23
	OCR1A=119;
     2cc:	87 e7       	ldi	r24, 0x77	; 119
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	9b bd       	out	0x2b, r25	; 43
     2d2:	8a bd       	out	0x2a, r24	; 42
	OCR1B=135;
     2d4:	87 e8       	ldi	r24, 0x87	; 135
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	99 bd       	out	0x29, r25	; 41
     2da:	88 bd       	out	0x28, r24	; 40
	TCCR1A =TCCR1A|(0b10 <<COM1A0)|(0b11 <<COM1B0)|(0b01 << WGM10);
     2dc:	8f b5       	in	r24, 0x2f	; 47
     2de:	81 6b       	ori	r24, 0xB1	; 177
     2e0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0b1 << CS10) | (0b00 << WGM12);
     2e2:	8e b5       	in	r24, 0x2e	; 46
     2e4:	81 60       	ori	r24, 0x01	; 1
     2e6:	8e bd       	out	0x2e, r24	; 46
     2e8:	08 95       	ret

000002ea <twi_start>:
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     2ea:	85 ea       	ldi	r24, 0xA5	; 165
     2ec:	86 bf       	out	0x36, r24	; 54
ISR(TWI_vect){
	status = (TWSR & 0xF8);
}

static uint8_t twi_start(void){
	uint16_t i = 0;
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <twi_start+0x14>
		i++;
     2f4:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     2f6:	80 34       	cpi	r24, 0x40	; 64
     2f8:	26 e0       	ldi	r18, 0x06	; 6
     2fa:	92 07       	cpc	r25, r18
     2fc:	30 f4       	brcc	.+12     	; 0x30a <twi_start+0x20>

static uint8_t twi_start(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
     2fe:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     302:	28 30       	cpi	r18, 0x08	; 8
     304:	b9 f7       	brne	.-18     	; 0x2f4 <twi_start+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_START){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     30a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     30c:	08 95       	ret

0000030e <twi_stop>:

static void twi_stop(void){
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
     30e:	85 e9       	ldi	r24, 0x95	; 149
     310:	86 bf       	out	0x36, r24	; 54
     312:	08 95       	ret

00000314 <twi_restart>:
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
     314:	85 ea       	ldi	r24, 0xA5	; 165
     316:	86 bf       	out	0x36, r24	; 54
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN) | (1 << TWIE);
}

static uint8_t twi_restart(void){
	uint16_t i = 0;
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     31c:	05 c0       	rjmp	.+10     	; 0x328 <twi_restart+0x14>
		i++;
     31e:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     320:	80 34       	cpi	r24, 0x40	; 64
     322:	26 e0       	ldi	r18, 0x06	; 6
     324:	92 07       	cpc	r25, r18
     326:	30 f4       	brcc	.+12     	; 0x334 <twi_restart+0x20>

static uint8_t twi_restart(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
     328:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     32c:	20 31       	cpi	r18, 0x10	; 16
     32e:	b9 f7       	brne	.-18     	; 0x31e <twi_restart+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);
	
	while(status != TWI_RSTART){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     334:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     336:	08 95       	ret

00000338 <twi_addr_write_ack>:

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     338:	85 e8       	ldi	r24, 0x85	; 133
     33a:	86 bf       	out	0x36, r24	; 54
	}
	return TWI_OK;
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     340:	05 c0       	rjmp	.+10     	; 0x34c <twi_addr_write_ack+0x14>
		i++;
     342:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     344:	80 34       	cpi	r24, 0x40	; 64
     346:	26 e0       	ldi	r18, 0x06	; 6
     348:	92 07       	cpc	r25, r18
     34a:	30 f4       	brcc	.+12     	; 0x358 <twi_addr_write_ack+0x20>
}

static uint8_t twi_addr_write_ack(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
     34c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     350:	28 31       	cpi	r18, 0x18	; 24
     352:	b9 f7       	brne	.-18     	; 0x342 <twi_addr_write_ack+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	08 95       	ret
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     358:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     35a:	08 95       	ret

0000035c <twi_data_write_ack>:


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     35c:	85 e8       	ldi	r24, 0x85	; 133
     35e:	86 bf       	out	0x36, r24	; 54
	return TWI_OK;
}


static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     364:	05 c0       	rjmp	.+10     	; 0x370 <twi_data_write_ack+0x14>
		i++;
     366:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     368:	80 34       	cpi	r24, 0x40	; 64
     36a:	26 e0       	ldi	r18, 0x06	; 6
     36c:	92 07       	cpc	r25, r18
     36e:	30 f4       	brcc	.+12     	; 0x37c <twi_data_write_ack+0x20>

static uint8_t twi_data_write_ack(void){
	uint16_t i = 0;
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
     370:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     374:	28 32       	cpi	r18, 0x28	; 40
     376:	b9 f7       	brne	.-18     	; 0x366 <twi_data_write_ack+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	08 95       	ret
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIT_DATA_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     37c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     37e:	08 95       	ret

00000380 <twi_addr_read_ack>:


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     380:	85 e8       	ldi	r24, 0x85	; 133
     382:	86 bf       	out	0x36, r24	; 54
	return TWI_OK;
}


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     388:	05 c0       	rjmp	.+10     	; 0x394 <twi_addr_read_ack+0x14>
		i++;
     38a:	01 96       	adiw	r24, 0x01	; 1
		if(i >= TWI_TIMEOUT){
     38c:	80 34       	cpi	r24, 0x40	; 64
     38e:	26 e0       	ldi	r18, 0x06	; 6
     390:	92 07       	cpc	r25, r18
     392:	30 f4       	brcc	.+12     	; 0x3a0 <twi_addr_read_ack+0x20>


static uint8_t twi_addr_read_ack(void){
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
     394:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     398:	20 34       	cpi	r18, 0x40	; 64
     39a:	b9 f7       	brne	.-18     	; 0x38a <twi_addr_read_ack+0xa>
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
		}
	}
	return TWI_OK;
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	08 95       	ret
	uint16_t i = 0;
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
	while(status != TWIR_ADDR_ACK){
		i++;
		if(i >= TWI_TIMEOUT){
			return TWI_ERROR_START;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return TWI_OK;
}
     3a2:	08 95       	ret

000003a4 <twi_data_read_ack>:


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
     3a4:	88 23       	and	r24, r24
     3a6:	81 f0       	breq	.+32     	; 0x3c8 <twi_data_read_ack+0x24>
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
     3a8:	85 ec       	ldi	r24, 0xC5	; 197
     3aa:	86 bf       	out	0x36, r24	; 54
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <twi_data_read_ack+0x18>
			i++;
     3b2:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     3b4:	80 34       	cpi	r24, 0x40	; 64
     3b6:	26 e0       	ldi	r18, 0x06	; 6
     3b8:	92 07       	cpc	r25, r18
     3ba:	b0 f4       	brcc	.+44     	; 0x3e8 <twi_data_read_ack+0x44>

static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
     3bc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     3c0:	20 35       	cpi	r18, 0x50	; 80
     3c2:	b9 f7       	brne	.-18     	; 0x3b2 <twi_data_read_ack+0xe>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	08 95       	ret
				return TWI_ERROR_START;
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
     3c8:	85 e8       	ldi	r24, 0x85	; 133
     3ca:	86 bf       	out	0x36, r24	; 54
	return TWI_OK;
}


static uint8_t twi_data_read_ack(uint8_t ack){
	uint16_t i = 0;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <twi_data_read_ack+0x38>
			i++;
     3d2:	01 96       	adiw	r24, 0x01	; 1
			if(i >= TWI_TIMEOUT){
     3d4:	80 34       	cpi	r24, 0x40	; 64
     3d6:	26 e0       	ldi	r18, 0x06	; 6
     3d8:	92 07       	cpc	r25, r18
     3da:	40 f4       	brcc	.+16     	; 0x3ec <twi_data_read_ack+0x48>
			}
		}
	}else{
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
     3dc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <status>
     3e0:	28 35       	cpi	r18, 0x58	; 88
     3e2:	b9 f7       	brne	.-18     	; 0x3d2 <twi_data_read_ack+0x2e>
				return TWI_ERROR_START;
			}
		}
		
	}
	return TWI_OK;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	08 95       	ret
	if(ack != 0){
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE) | (1 << TWEA);
		while(status != TWIR_DATA_ACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	08 95       	ret
		
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);
		while(status != TWIR_DATA_NACK){
			i++;
			if(i >= TWI_TIMEOUT){
				return TWI_ERROR_START;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		
	}
	return TWI_OK;
}
     3ee:	08 95       	ret

000003f0 <__vector_17>:

#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI_vect){
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	8f 93       	push	r24
	status = (TWSR & 0xF8);
     3fc:	81 b1       	in	r24, 0x01	; 1
     3fe:	88 7f       	andi	r24, 0xF8	; 248
     400:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <status>
}
     404:	8f 91       	pop	r24
     406:	0f 90       	pop	r0
     408:	0f be       	out	0x3f, r0	; 63
     40a:	0f 90       	pop	r0
     40c:	1f 90       	pop	r1
     40e:	18 95       	reti

00000410 <twi_read>:
		
	}
	return TWI_OK;
}

uint8_t twi_read(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	d8 2e       	mov	r13, r24
     420:	c6 2e       	mov	r12, r22
     422:	7a 01       	movw	r14, r20
     424:	89 01       	movw	r16, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     426:	61 df       	rcall	.-318    	; 0x2ea <twi_start>
     428:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     42a:	88 23       	and	r24, r24
     42c:	19 f0       	breq	.+6      	; 0x434 <twi_read+0x24>
		twi_stop();
     42e:	6f df       	rcall	.-290    	; 0x30e <twi_stop>
		return err;
     430:	8c 2f       	mov	r24, r28
     432:	4d c0       	rjmp	.+154    	; 0x4ce <__stack+0x6f>
	}
	TWDR = (addr << 1) | 0;
     434:	8d 2d       	mov	r24, r13
     436:	88 0f       	add	r24, r24
     438:	83 b9       	out	0x03, r24	; 3
	
	
	err = twi_addr_write_ack();
     43a:	7e df       	rcall	.-260    	; 0x338 <twi_addr_write_ack>
     43c:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     43e:	88 23       	and	r24, r24
     440:	19 f0       	breq	.+6      	; 0x448 <twi_read+0x38>
		twi_stop();
     442:	65 df       	rcall	.-310    	; 0x30e <twi_stop>
		return err;
     444:	8c 2f       	mov	r24, r28
     446:	43 c0       	rjmp	.+134    	; 0x4ce <__stack+0x6f>
	}
	
	TWDR = reg;
     448:	c3 b8       	out	0x03, r12	; 3
	err = twi_data_write_ack();
     44a:	88 df       	rcall	.-240    	; 0x35c <twi_data_write_ack>
     44c:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     44e:	88 23       	and	r24, r24
     450:	19 f0       	breq	.+6      	; 0x458 <twi_read+0x48>
		twi_stop();
     452:	5d df       	rcall	.-326    	; 0x30e <twi_stop>
		return err;
     454:	8c 2f       	mov	r24, r28
     456:	3b c0       	rjmp	.+118    	; 0x4ce <__stack+0x6f>
	}
	
	err = twi_restart();
     458:	5d df       	rcall	.-326    	; 0x314 <twi_restart>
     45a:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     45c:	88 23       	and	r24, r24
     45e:	19 f0       	breq	.+6      	; 0x466 <__stack+0x7>
		twi_stop();
     460:	56 df       	rcall	.-340    	; 0x30e <twi_stop>
		return err;
     462:	8c 2f       	mov	r24, r28
     464:	34 c0       	rjmp	.+104    	; 0x4ce <__stack+0x6f>
	}
	
	TWDR = (addr << 1) | 1;
     466:	8d 2d       	mov	r24, r13
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	81 60       	ori	r24, 0x01	; 1
     470:	83 b9       	out	0x03, r24	; 3

	err = twi_addr_read_ack();
     472:	86 df       	rcall	.-244    	; 0x380 <twi_addr_read_ack>
     474:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     476:	88 23       	and	r24, r24
     478:	a1 f0       	breq	.+40     	; 0x4a2 <__stack+0x43>
		twi_stop();
     47a:	49 df       	rcall	.-366    	; 0x30e <twi_stop>
		return err;
     47c:	8c 2f       	mov	r24, r28
     47e:	27 c0       	rjmp	.+78     	; 0x4ce <__stack+0x6f>
	}
	
	for(i = 0; i < (len - 1);i++){
		err = twi_data_read_ack(1);
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	90 df       	rcall	.-224    	; 0x3a4 <twi_data_read_ack>
     484:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     486:	88 23       	and	r24, r24
     488:	19 f0       	breq	.+6      	; 0x490 <__stack+0x31>
			twi_stop();
     48a:	41 df       	rcall	.-382    	; 0x30e <twi_stop>
			return err;
     48c:	8c 2f       	mov	r24, r28
     48e:	1f c0       	rjmp	.+62     	; 0x4ce <__stack+0x6f>
		}
		data[i] = TWDR;
     490:	f7 01       	movw	r30, r14
     492:	ec 0d       	add	r30, r12
     494:	fd 1d       	adc	r31, r13
     496:	83 b1       	in	r24, 0x03	; 3
     498:	80 83       	st	Z, r24
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < (len - 1);i++){
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	c8 1a       	sub	r12, r24
     49e:	d8 0a       	sbc	r13, r24
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__stack+0x47>
     4a2:	c1 2c       	mov	r12, r1
     4a4:	d1 2c       	mov	r13, r1
     4a6:	c8 01       	movw	r24, r16
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	c8 16       	cp	r12, r24
     4ac:	d9 06       	cpc	r13, r25
     4ae:	40 f3       	brcs	.-48     	; 0x480 <__stack+0x21>
			return err;
		}
		data[i] = TWDR;
	}
	
	err = twi_data_read_ack(0);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	78 df       	rcall	.-272    	; 0x3a4 <twi_data_read_ack>
     4b4:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     4b6:	88 23       	and	r24, r24
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <__stack+0x61>
		twi_stop();
     4ba:	29 df       	rcall	.-430    	; 0x30e <twi_stop>
		return err;
     4bc:	8c 2f       	mov	r24, r28
     4be:	07 c0       	rjmp	.+14     	; 0x4ce <__stack+0x6f>
	}
	data[i] = TWDR;
     4c0:	f7 01       	movw	r30, r14
     4c2:	ec 0d       	add	r30, r12
     4c4:	fd 1d       	adc	r31, r13
     4c6:	83 b1       	in	r24, 0x03	; 3
     4c8:	80 83       	st	Z, r24
	
	twi_stop();
     4ca:	21 df       	rcall	.-446    	; 0x30e <twi_stop>
	
	return err;
     4cc:	8c 2f       	mov	r24, r28
}
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	08 95       	ret

000004de <twi_write>:


uint8_t twi_write(uint8_t addr,uint8_t reg,uint8_t *data,uint16_t len){
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	18 2f       	mov	r17, r24
     4ee:	06 2f       	mov	r16, r22
     4f0:	6a 01       	movw	r12, r20
     4f2:	79 01       	movw	r14, r18
	
	uint16_t i = 0;
	uint8_t err = TWI_OK;
	
	err = twi_start();
     4f4:	fa de       	rcall	.-524    	; 0x2ea <twi_start>
     4f6:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     4f8:	88 23       	and	r24, r24
     4fa:	19 f0       	breq	.+6      	; 0x502 <twi_write+0x24>
		twi_stop();
     4fc:	08 df       	rcall	.-496    	; 0x30e <twi_stop>
		return err;
     4fe:	8c 2f       	mov	r24, r28
     500:	27 c0       	rjmp	.+78     	; 0x550 <twi_write+0x72>
	}
	TWDR = (addr << 1) | 0;
     502:	11 0f       	add	r17, r17
     504:	13 b9       	out	0x03, r17	; 3
	
	
	err = twi_addr_write_ack();
     506:	18 df       	rcall	.-464    	; 0x338 <twi_addr_write_ack>
     508:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     50a:	88 23       	and	r24, r24
     50c:	19 f0       	breq	.+6      	; 0x514 <twi_write+0x36>
		twi_stop();
     50e:	ff de       	rcall	.-514    	; 0x30e <twi_stop>
		return err;
     510:	8c 2f       	mov	r24, r28
     512:	1e c0       	rjmp	.+60     	; 0x550 <twi_write+0x72>
	}
	
	TWDR = reg;
     514:	03 b9       	out	0x03, r16	; 3
	err = twi_data_write_ack();
     516:	22 df       	rcall	.-444    	; 0x35c <twi_data_write_ack>
     518:	c8 2f       	mov	r28, r24
	if(err != TWI_OK){
     51a:	88 23       	and	r24, r24
     51c:	91 f0       	breq	.+36     	; 0x542 <twi_write+0x64>
		twi_stop();
     51e:	f7 de       	rcall	.-530    	; 0x30e <twi_stop>
		return err;
     520:	8c 2f       	mov	r24, r28
     522:	16 c0       	rjmp	.+44     	; 0x550 <twi_write+0x72>
	}
	
	for(i = 0; i < len;i++){
		TWDR = data[i];
     524:	f6 01       	movw	r30, r12
     526:	e0 0f       	add	r30, r16
     528:	f1 1f       	adc	r31, r17
     52a:	80 81       	ld	r24, Z
     52c:	83 b9       	out	0x03, r24	; 3
		err = twi_data_write_ack();
     52e:	16 df       	rcall	.-468    	; 0x35c <twi_data_write_ack>
     530:	c8 2f       	mov	r28, r24
		if(err != TWI_OK){
     532:	88 23       	and	r24, r24
     534:	19 f0       	breq	.+6      	; 0x53c <twi_write+0x5e>
			twi_stop();
     536:	eb de       	rcall	.-554    	; 0x30e <twi_stop>
			return err;
     538:	8c 2f       	mov	r24, r28
     53a:	0a c0       	rjmp	.+20     	; 0x550 <twi_write+0x72>
	if(err != TWI_OK){
		twi_stop();
		return err;
	}
	
	for(i = 0; i < len;i++){
     53c:	0f 5f       	subi	r16, 0xFF	; 255
     53e:	1f 4f       	sbci	r17, 0xFF	; 255
     540:	02 c0       	rjmp	.+4      	; 0x546 <twi_write+0x68>
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	10 e0       	ldi	r17, 0x00	; 0
     546:	0e 15       	cp	r16, r14
     548:	1f 05       	cpc	r17, r15
     54a:	60 f3       	brcs	.-40     	; 0x524 <twi_write+0x46>
			return err;
		}
	}
	
	
	twi_stop();
     54c:	e0 de       	rcall	.-576    	; 0x30e <twi_stop>
	
	return err;
     54e:	8c 2f       	mov	r24, r28
}
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	08 95       	ret

00000560 <twi_init>:





void twi_init(uint32_t speed){
     560:	9b 01       	movw	r18, r22
     562:	ac 01       	movw	r20, r24
	
	uint32_t gen_t = 0;
	gen_t = (((F_CPU/speed) - 16) / 2) & 0xFF;
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	74 e2       	ldi	r23, 0x24	; 36
     568:	84 ef       	ldi	r24, 0xF4	; 244
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	22 d2       	rcall	.+1092   	; 0x9b2 <__udivmodsi4>
     56e:	da 01       	movw	r26, r20
     570:	c9 01       	movw	r24, r18
     572:	40 97       	sbiw	r24, 0x10	; 16
     574:	a1 09       	sbc	r26, r1
     576:	b1 09       	sbc	r27, r1
     578:	b6 95       	lsr	r27
     57a:	a7 95       	ror	r26
     57c:	97 95       	ror	r25
     57e:	87 95       	ror	r24
	TWBR = gen_t & 0xFF;
     580:	80 b9       	out	0x00, r24	; 0
	TWCR = (1 << TWEN) | (1 << TWIE);
     582:	85 e0       	ldi	r24, 0x05	; 5
     584:	86 bf       	out	0x36, r24	; 54
     586:	08 95       	ret

00000588 <serial_complete>:
	uint8_t data = 0;
	data = rx_buffer[rx_read_pos];
	rx_read_pos++;
	rx_count--;
	return data;
}
     588:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <read_complete>
     58c:	08 95       	ret

0000058e <serial_read_data>:
     58e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <read_complete>
     592:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <rx_count+0x1>
     596:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <rx_count>
     59a:	88 ee       	ldi	r24, 0xE8	; 232
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	08 95       	ret

000005a0 <__vector_11>:
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	8f 93       	push	r24
     5ac:	9f 93       	push	r25
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
     5b2:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <rx_count>
     5b6:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <rx_count+0x1>
     5ba:	8c b1       	in	r24, 0x0c	; 12
     5bc:	e8 51       	subi	r30, 0x18	; 24
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	80 83       	st	Z, r24
     5c2:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <rx_count>
     5c6:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <rx_count+0x1>
     5ca:	e8 51       	subi	r30, 0x18	; 24
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	8d 30       	cpi	r24, 0x0D	; 13
     5d2:	51 f4       	brne	.+20     	; 0x5e8 <__vector_11+0x48>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <read_complete>
     5da:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <rx_count>
     5de:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <rx_count+0x1>
     5e2:	e7 51       	subi	r30, 0x17	; 23
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	10 82       	st	Z, r1
     5e8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <rx_count>
     5ec:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <rx_count+0x1>
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <rx_count+0x1>
     5f6:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <rx_count>
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_13>:
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	8f 93       	push	r24
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <uart_tx_busy>
     61e:	8f 91       	pop	r24
     620:	0f 90       	pop	r0
     622:	0f be       	out	0x3f, r0	; 63
     624:	0f 90       	pop	r0
     626:	1f 90       	pop	r1
     628:	18 95       	reti

0000062a <uart_init>:
     62a:	44 23       	and	r20, r20
     62c:	29 f0       	breq	.+10     	; 0x638 <uart_init+0xe>
     62e:	2b b1       	in	r18, 0x0b	; 11
     630:	22 60       	ori	r18, 0x02	; 2
     632:	2b b9       	out	0x0b, r18	; 11
     634:	a8 e0       	ldi	r26, 0x08	; 8
     636:	01 c0       	rjmp	.+2      	; 0x63a <uart_init+0x10>
     638:	a0 e1       	ldi	r26, 0x10	; 16
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	9b 01       	movw	r18, r22
     63e:	ac 01       	movw	r20, r24
     640:	da d1       	rcall	.+948    	; 0x9f6 <__muluhisi3>
     642:	9b 01       	movw	r18, r22
     644:	ac 01       	movw	r20, r24
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	74 e2       	ldi	r23, 0x24	; 36
     64a:	84 ef       	ldi	r24, 0xF4	; 244
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	b1 d1       	rcall	.+866    	; 0x9b2 <__udivmodsi4>
     650:	ba 01       	movw	r22, r20
     652:	a9 01       	movw	r20, r18
     654:	41 50       	subi	r20, 0x01	; 1
     656:	51 09       	sbc	r21, r1
     658:	61 09       	sbc	r22, r1
     65a:	71 09       	sbc	r23, r1
     65c:	db 01       	movw	r26, r22
     65e:	ca 01       	movw	r24, r20
     660:	88 27       	eor	r24, r24
     662:	9f 70       	andi	r25, 0x0F	; 15
     664:	aa 27       	eor	r26, r26
     666:	bb 27       	eor	r27, r27
     668:	89 2f       	mov	r24, r25
     66a:	9a 2f       	mov	r25, r26
     66c:	ab 2f       	mov	r26, r27
     66e:	bb 27       	eor	r27, r27
     670:	80 bd       	out	0x20, r24	; 32
     672:	49 b9       	out	0x09, r20	; 9
     674:	8a b1       	in	r24, 0x0a	; 10
     676:	88 6d       	ori	r24, 0xD8	; 216
     678:	8a b9       	out	0x0a, r24	; 10
     67a:	86 e8       	ldi	r24, 0x86	; 134
     67c:	80 bd       	out	0x20, r24	; 32
     67e:	08 95       	ret

00000680 <parseString>:


void parseString(const char* input, display* output) {
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	00 d0       	rcall	.+0      	; 0x68a <parseString+0xa>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	8b 01       	movw	r16, r22
	char* token;
	char* rest = (char*)input;
     690:	9a 83       	std	Y+2, r25	; 0x02
     692:	89 83       	std	Y+1, r24	; 0x01

	
	token = strtok_r(rest, "/", &rest);
     694:	ae 01       	movw	r20, r28
     696:	4f 5f       	subi	r20, 0xFF	; 255
     698:	5f 4f       	sbci	r21, 0xFF	; 255
     69a:	62 ec       	ldi	r22, 0xC2	; 194
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	ed d1       	rcall	.+986    	; 0xa7a <strtok_r>
	if (token) {
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	39 f0       	breq	.+14     	; 0x6b2 <parseString+0x32>
		strncpy(output->first_line, token, sizeof(output->first_line) - 1);
     6a4:	4f e1       	ldi	r20, 0x1F	; 31
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	bc 01       	movw	r22, r24
     6aa:	c8 01       	movw	r24, r16
     6ac:	d7 d1       	rcall	.+942    	; 0xa5c <strncpy>
		output->first_line[sizeof(output->first_line) - 1] = '\0';
     6ae:	f8 01       	movw	r30, r16
     6b0:	17 8e       	std	Z+31, r1	; 0x1f
	}

	token = strtok_r(rest, "/", &rest);
     6b2:	ae 01       	movw	r20, r28
     6b4:	4f 5f       	subi	r20, 0xFF	; 255
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	62 ec       	ldi	r22, 0xC2	; 194
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	dc d1       	rcall	.+952    	; 0xa7a <strtok_r>
	if (token) {
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	41 f0       	breq	.+16     	; 0x6d6 <parseString+0x56>
		strncpy(output->second_line, token, sizeof(output->second_line) - 1);
     6c6:	4f e1       	ldi	r20, 0x1F	; 31
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	bc 01       	movw	r22, r24
     6cc:	c8 01       	movw	r24, r16
     6ce:	80 96       	adiw	r24, 0x20	; 32
     6d0:	c5 d1       	rcall	.+906    	; 0xa5c <strncpy>
		output->second_line[sizeof(output->second_line) - 1] = '\0';
     6d2:	f8 01       	movw	r30, r16
     6d4:	17 ae       	std	Z+63, r1	; 0x3f
	}

	token = strtok_r(rest, "/", &rest);
     6d6:	ae 01       	movw	r20, r28
     6d8:	4f 5f       	subi	r20, 0xFF	; 255
     6da:	5f 4f       	sbci	r21, 0xFF	; 255
     6dc:	62 ec       	ldi	r22, 0xC2	; 194
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	9a 81       	ldd	r25, Y+2	; 0x02
     6e4:	ca d1       	rcall	.+916    	; 0xa7a <strtok_r>
	if (token) {
     6e6:	00 97       	sbiw	r24, 0x00	; 0
     6e8:	29 f0       	breq	.+10     	; 0x6f4 <parseString+0x74>
		output->ld_red = (uint8_t)atoi(token);
     6ea:	9b d1       	rcall	.+822    	; 0xa22 <atoi>
     6ec:	f8 01       	movw	r30, r16
     6ee:	e0 5c       	subi	r30, 0xC0	; 192
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	80 83       	st	Z, r24
	}

	token = strtok_r(rest, "/", &rest);
     6f4:	ae 01       	movw	r20, r28
     6f6:	4f 5f       	subi	r20, 0xFF	; 255
     6f8:	5f 4f       	sbci	r21, 0xFF	; 255
     6fa:	62 ec       	ldi	r22, 0xC2	; 194
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	9a 81       	ldd	r25, Y+2	; 0x02
     702:	bb d1       	rcall	.+886    	; 0xa7a <strtok_r>
	if (token) {
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	29 f0       	breq	.+10     	; 0x712 <parseString+0x92>
		output->ld_green = (uint8_t)atoi(token);
     708:	8c d1       	rcall	.+792    	; 0xa22 <atoi>
     70a:	f8 01       	movw	r30, r16
     70c:	ef 5b       	subi	r30, 0xBF	; 191
     70e:	ff 4f       	sbci	r31, 0xFF	; 255
     710:	80 83       	st	Z, r24
	}

	token = strtok_r(rest, "/", &rest);
     712:	ae 01       	movw	r20, r28
     714:	4f 5f       	subi	r20, 0xFF	; 255
     716:	5f 4f       	sbci	r21, 0xFF	; 255
     718:	62 ec       	ldi	r22, 0xC2	; 194
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	9a 81       	ldd	r25, Y+2	; 0x02
     720:	ac d1       	rcall	.+856    	; 0xa7a <strtok_r>
	if (token) {
     722:	00 97       	sbiw	r24, 0x00	; 0
     724:	29 f0       	breq	.+10     	; 0x730 <parseString+0xb0>
		output->ld_orange = (uint8_t)atoi(token);
     726:	7d d1       	rcall	.+762    	; 0xa22 <atoi>
     728:	f8 01       	movw	r30, r16
     72a:	ee 5b       	subi	r30, 0xBE	; 190
     72c:	ff 4f       	sbci	r31, 0xFF	; 255
     72e:	80 83       	st	Z, r24
	}
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	08 95       	ret

0000073e <spiwrite>:


void spiwrite(uint8_t c)
{
	unsigned char n;
	for(n=8; n>0; n--)
     73e:	98 e0       	ldi	r25, 0x08	; 8
     740:	1d c0       	rjmp	.+58     	; 0x77c <spiwrite+0x3e>
	{
		CLK_LO;;              //SCL = low
     742:	28 b3       	in	r18, 0x18	; 24
     744:	2f 7d       	andi	r18, 0xDF	; 223
     746:	28 bb       	out	0x18, r18	; 24
		if(c &(1<<(n-1))){DAT_HI;}
     748:	49 2f       	mov	r20, r25
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	41 50       	subi	r20, 0x01	; 1
     74e:	51 09       	sbc	r21, r1
     750:	28 2f       	mov	r18, r24
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	02 c0       	rjmp	.+4      	; 0x75a <spiwrite+0x1c>
     756:	35 95       	asr	r19
     758:	27 95       	ror	r18
     75a:	4a 95       	dec	r20
     75c:	e2 f7       	brpl	.-8      	; 0x756 <spiwrite+0x18>
     75e:	20 ff       	sbrs	r18, 0
     760:	04 c0       	rjmp	.+8      	; 0x76a <spiwrite+0x2c>
     762:	28 b3       	in	r18, 0x18	; 24
     764:	28 60       	ori	r18, 0x08	; 8
     766:	28 bb       	out	0x18, r18	; 24
     768:	03 c0       	rjmp	.+6      	; 0x770 <spiwrite+0x32>
		else{ DAT_LO;}
     76a:	28 b3       	in	r18, 0x18	; 24
     76c:	27 7f       	andi	r18, 0xF7	; 247
     76e:	28 bb       	out	0x18, r18	; 24
		nop();
     770:	00 00       	nop
		CLK_HI;               //SCL rising edge trigger
     772:	28 b3       	in	r18, 0x18	; 24
     774:	20 62       	ori	r18, 0x20	; 32
     776:	28 bb       	out	0x18, r18	; 24
		nop();
     778:	00 00       	nop


void spiwrite(uint8_t c)
{
	unsigned char n;
	for(n=8; n>0; n--)
     77a:	91 50       	subi	r25, 0x01	; 1
     77c:	91 11       	cpse	r25, r1
     77e:	e1 cf       	rjmp	.-62     	; 0x742 <spiwrite+0x4>
		else{ DAT_LO;}
		nop();
		CLK_HI;               //SCL rising edge trigger
		nop();
	}
}
     780:	08 95       	ret

00000782 <vfd_command>:

void vfd_command(uint8_t c)
{
     782:	cf 93       	push	r28
     784:	c8 2f       	mov	r28, r24
	STB_HI
     786:	88 b3       	in	r24, 0x18	; 24
     788:	81 60       	ori	r24, 0x01	; 1
     78a:	88 bb       	out	0x18, r24	; 24
	nop();
     78c:	00 00       	nop
	STB_LO
     78e:	88 b3       	in	r24, 0x18	; 24
     790:	8e 7f       	andi	r24, 0xFE	; 254
     792:	88 bb       	out	0x18, r24	; 24
	spiwrite(0xf8);
     794:	88 ef       	ldi	r24, 0xF8	; 248
     796:	d3 df       	rcall	.-90     	; 0x73e <spiwrite>
	spiwrite(c);
     798:	8c 2f       	mov	r24, r28
     79a:	d1 df       	rcall	.-94     	; 0x73e <spiwrite>
	STB_HI
     79c:	88 b3       	in	r24, 0x18	; 24
     79e:	81 60       	ori	r24, 0x01	; 1
     7a0:	88 bb       	out	0x18, r24	; 24
	nop();
     7a2:	00 00       	nop
	STB_LO
     7a4:	88 b3       	in	r24, 0x18	; 24
     7a6:	8e 7f       	andi	r24, 0xFE	; 254
     7a8:	88 bb       	out	0x18, r24	; 24
}
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <vfd_data>:

void vfd_data(uint8_t c)
{
     7ae:	cf 93       	push	r28
     7b0:	c8 2f       	mov	r28, r24
	STB_HI
     7b2:	88 b3       	in	r24, 0x18	; 24
     7b4:	81 60       	ori	r24, 0x01	; 1
     7b6:	88 bb       	out	0x18, r24	; 24
	nop();
     7b8:	00 00       	nop
	STB_LO
     7ba:	88 b3       	in	r24, 0x18	; 24
     7bc:	8e 7f       	andi	r24, 0xFE	; 254
     7be:	88 bb       	out	0x18, r24	; 24
	spiwrite(0xfa);
     7c0:	8a ef       	ldi	r24, 0xFA	; 250
     7c2:	bd df       	rcall	.-134    	; 0x73e <spiwrite>
	//_delay_us(1);
	spiwrite(c);
     7c4:	8c 2f       	mov	r24, r28
     7c6:	bb df       	rcall	.-138    	; 0x73e <spiwrite>
	STB_HI
     7c8:	88 b3       	in	r24, 0x18	; 24
     7ca:	81 60       	ori	r24, 0x01	; 1
     7cc:	88 bb       	out	0x18, r24	; 24
	nop();
     7ce:	00 00       	nop
	STB_LO
     7d0:	88 b3       	in	r24, 0x18	; 24
     7d2:	8e 7f       	andi	r24, 0xFE	; 254
     7d4:	88 bb       	out	0x18, r24	; 24
}
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <vfd_init>:


void vfd_init()
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
	RST_LO
     7de:	85 b3       	in	r24, 0x15	; 21
     7e0:	8e 7f       	andi	r24, 0xFE	; 254
     7e2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e4:	8f e3       	ldi	r24, 0x3F	; 63
     7e6:	9c e9       	ldi	r25, 0x9C	; 156
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <vfd_init+0xe>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <vfd_init+0x14>
     7ee:	00 00       	nop
	_delay_ms(10);
	RST_HI
     7f0:	85 b3       	in	r24, 0x15	; 21
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	85 bb       	out	0x15, r24	; 21
	CS_LO
     7f6:	85 b3       	in	r24, 0x15	; 21
     7f8:	8d 7f       	andi	r24, 0xFD	; 253
     7fa:	85 bb       	out	0x15, r24	; 21
	vfd_command(0b00111000); //0x38		//Function Set address [0,0,1,DL,N,X,BR1,BR0]
     7fc:	88 e3       	ldi	r24, 0x38	; 56
     7fe:	c1 df       	rcall	.-126    	; 0x782 <vfd_command>
	vfd_command(0b00000001); //0x01		//Clear Display
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	bf df       	rcall	.-130    	; 0x782 <vfd_command>
	vfd_data(0x00);						//sets DDRAM address at 00H
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	d3 df       	rcall	.-90     	; 0x7ae <vfd_data>
	vfd_command(0b00001100); //0x0c		//Display ON/Off [0,0,0,0,1,D,C,B] D-screen on/off, C-cursor on/off, B-blink cursor on/off
     808:	8c e0       	ldi	r24, 0x0C	; 12
     80a:	bb df       	rcall	.-138    	; 0x782 <vfd_command>
	vfd_command(0b10000000); //0x80		//set cursor to 0 position
     80c:	80 e8       	ldi	r24, 0x80	; 128
     80e:	b9 df       	rcall	.-142    	; 0x782 <vfd_command>
	int i;
	for (i = 0; i < 64; i++) {
     810:	c0 e0       	ldi	r28, 0x00	; 0
     812:	d0 e0       	ldi	r29, 0x00	; 0
     814:	03 c0       	rjmp	.+6      	; 0x81c <vfd_init+0x42>
		vfd_data(0xff);
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	ca df       	rcall	.-108    	; 0x7ae <vfd_data>
	vfd_command(0b00000001); //0x01		//Clear Display
	vfd_data(0x00);						//sets DDRAM address at 00H
	vfd_command(0b00001100); //0x0c		//Display ON/Off [0,0,0,0,1,D,C,B] D-screen on/off, C-cursor on/off, B-blink cursor on/off
	vfd_command(0b10000000); //0x80		//set cursor to 0 position
	int i;
	for (i = 0; i < 64; i++) {
     81a:	21 96       	adiw	r28, 0x01	; 1
     81c:	c0 34       	cpi	r28, 0x40	; 64
     81e:	d1 05       	cpc	r29, r1
     820:	d4 f3       	brlt	.-12     	; 0x816 <vfd_init+0x3c>
		vfd_data(0xff);
	}
	vfd_command(0b00000001); //0x01
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	ae df       	rcall	.-164    	; 0x782 <vfd_command>
	CS_HI
     826:	85 b3       	in	r24, 0x15	; 21
     828:	82 60       	ori	r24, 0x02	; 2
     82a:	85 bb       	out	0x15, r24	; 21
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <vfd_set_cursor>:

void vfd_set_cursor(uint8_t line, uint8_t position){
	if(line==2){position += 0x40;}
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	09 f4       	brne	.+2      	; 0x838 <vfd_set_cursor+0x6>
     836:	60 5c       	subi	r22, 0xC0	; 192
	CS_LO
     838:	85 b3       	in	r24, 0x15	; 21
     83a:	8d 7f       	andi	r24, 0xFD	; 253
     83c:	85 bb       	out	0x15, r24	; 21
	vfd_command(0b10000000 | position);
     83e:	86 2f       	mov	r24, r22
     840:	80 68       	ori	r24, 0x80	; 128
     842:	9f df       	rcall	.-194    	; 0x782 <vfd_command>
	CS_HI
     844:	85 b3       	in	r24, 0x15	; 21
     846:	82 60       	ori	r24, 0x02	; 2
     848:	85 bb       	out	0x15, r24	; 21
     84a:	08 95       	ret

0000084c <vfd_string>:
}


void vfd_string(uint8_t *c){
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	8c 01       	movw	r16, r24
	uint16_t i = 0;
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	d0 e0       	ldi	r29, 0x00	; 0
	do{
		vfd_data(c[i]);
     85a:	f8 01       	movw	r30, r16
     85c:	ec 0f       	add	r30, r28
     85e:	fd 1f       	adc	r31, r29
     860:	80 81       	ld	r24, Z
     862:	a5 df       	rcall	.-182    	; 0x7ae <vfd_data>
		i++;
     864:	21 96       	adiw	r28, 0x01	; 1
		
	}while(c[i] != '\0');
     866:	f8 01       	movw	r30, r16
     868:	ec 0f       	add	r30, r28
     86a:	fd 1f       	adc	r31, r29
     86c:	80 81       	ld	r24, Z
     86e:	81 11       	cpse	r24, r1
     870:	f4 cf       	rjmp	.-24     	; 0x85a <vfd_string+0xe>
	//uart_send_byte(c[i]);
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <main>:

int main(void)
{
   
   
   sei();
     87c:	78 94       	sei
   uart_init(38400,0);
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	76 e9       	ldi	r23, 0x96	; 150
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	d0 de       	rcall	.-608    	; 0x62a <uart_init>
   twi_init(400000);
     88a:	60 e8       	ldi	r22, 0x80	; 128
     88c:	7a e1       	ldi	r23, 0x1A	; 26
     88e:	86 e0       	ldi	r24, 0x06	; 6
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	66 de       	rcall	.-820    	; 0x560 <twi_init>
   //char char_array[128]="\0";
   
   //DDRC = 255;
   set_pin_dir(&vfd_reset , PORT_DIR_OUT);	set_pin_level(&vfd_reset , false);
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	8f eb       	ldi	r24, 0xBF	; 191
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0a dc       	rcall	.-2028   	; 0xb0 <set_pin_dir>
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	8f eb       	ldi	r24, 0xBF	; 191
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	dd db       	rcall	.-2118   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_cs , PORT_DIR_OUT);		set_pin_level(&vfd_cs , true);
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	8c eb       	ldi	r24, 0xBC	; 188
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	02 dc       	rcall	.-2044   	; 0xb0 <set_pin_dir>
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	8c eb       	ldi	r24, 0xBC	; 188
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	d5 db       	rcall	.-2134   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_stb , PORT_DIR_OUT);	set_pin_level(&vfd_stb , false);
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	89 eb       	ldi	r24, 0xB9	; 185
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	fa db       	rcall	.-2060   	; 0xb0 <set_pin_dir>
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	89 eb       	ldi	r24, 0xB9	; 185
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	cd db       	rcall	.-2150   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_mosi , PORT_DIR_OUT);	set_pin_level(&vfd_mosi , false);
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	86 eb       	ldi	r24, 0xB6	; 182
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	f2 db       	rcall	.-2076   	; 0xb0 <set_pin_dir>
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	86 eb       	ldi	r24, 0xB6	; 182
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	c5 db       	rcall	.-2166   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_clk , PORT_DIR_OUT);	set_pin_level(&vfd_clk , true);
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	83 eb       	ldi	r24, 0xB3	; 179
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	ea db       	rcall	.-2092   	; 0xb0 <set_pin_dir>
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	83 eb       	ldi	r24, 0xB3	; 179
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	bd db       	rcall	.-2182   	; 0x5e <set_pin_level>
   set_pin_dir(&vfd_40v , PORT_DIR_OUT);	set_pin_level(&vfd_40v , true);
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	80 eb       	ldi	r24, 0xB0	; 176
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	e2 db       	rcall	.-2108   	; 0xb0 <set_pin_dir>
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	80 eb       	ldi	r24, 0xB0	; 176
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	b5 db       	rcall	.-2198   	; 0x5e <set_pin_level>
     8f4:	2f ef       	ldi	r18, 0xFF	; 255
     8f6:	89 e6       	ldi	r24, 0x69	; 105
     8f8:	98 e1       	ldi	r25, 0x18	; 24
     8fa:	21 50       	subi	r18, 0x01	; 1
     8fc:	80 40       	sbci	r24, 0x00	; 0
     8fe:	90 40       	sbci	r25, 0x00	; 0
     900:	e1 f7       	brne	.-8      	; 0x8fa <main+0x7e>
     902:	00 c0       	rjmp	.+0      	; 0x904 <main+0x88>
     904:	00 00       	nop
   _delay_ms(500);
   timer1_init(0);
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	dc dc       	rcall	.-1608   	; 0x2c4 <timer1_init>
   uint8_t blink_divider = 0;
   rtc_set(&sys_rtc);
     90c:	85 e6       	ldi	r24, 0x65	; 101
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	8b dc       	rcall	.-1770   	; 0x228 <rtc_set>
   rtc_int_enable(&sys_rtc ,0);
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	85 e6       	ldi	r24, 0x65	; 101
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0c dc       	rcall	.-2024   	; 0x134 <rtc_int_enable>
   
   
   
   vfd_init();
     91c:	5e df       	rcall	.-324    	; 0x7da <vfd_init>




int main(void)
{
     91e:	c0 e0       	ldi	r28, 0x00	; 0
   while (1) 
   {



	if (serial_complete()){
     920:	33 de       	rcall	.-922    	; 0x588 <serial_complete>
     922:	88 23       	and	r24, r24
     924:	21 f0       	breq	.+8      	; 0x92e <main+0xb2>
		const char *data_p = serial_read_data();
     926:	33 de       	rcall	.-922    	; 0x58e <serial_read_data>
		parseString(data_p, &vfd);
     928:	6d e6       	ldi	r22, 0x6D	; 109
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	a9 de       	rcall	.-686    	; 0x680 <parseString>
     92e:	2f e7       	ldi	r18, 0x7F	; 127
     930:	88 e3       	ldi	r24, 0x38	; 56
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	21 50       	subi	r18, 0x01	; 1
     936:	80 40       	sbci	r24, 0x00	; 0
     938:	90 40       	sbci	r25, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <main+0xb8>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <main+0xc2>
     93e:	00 00       	nop




	_delay_ms(25);
	blink_divider++;
     940:	cf 5f       	subi	r28, 0xFF	; 255
	if (blink_divider >= 15){
     942:	cf 30       	cpi	r28, 0x0F	; 15
     944:	68 f3       	brcs	.-38     	; 0x920 <main+0xa4>
		rtc_sync(&sys_rtc);
     946:	85 e6       	ldi	r24, 0x65	; 101
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	1f dc       	rcall	.-1986   	; 0x18a <rtc_sync>
		sprintf(vfd.first_line, "%02d:%02d:%02d  %02d-%02d-20%02d", sys_rtc.hour, sys_rtc.minute, sys_rtc.second, sys_rtc.date, sys_rtc.month, sys_rtc.year);
     94c:	e5 e6       	ldi	r30, 0x65	; 101
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	44 81       	ldd	r20, Z+4	; 0x04
     952:	33 81       	ldd	r19, Z+3	; 0x03
     954:	20 81       	ld	r18, Z
     956:	91 81       	ldd	r25, Z+1	; 0x01
     958:	82 81       	ldd	r24, Z+2	; 0x02
     95a:	56 81       	ldd	r21, Z+6	; 0x06
     95c:	5f 93       	push	r21
     95e:	55 81       	ldd	r21, Z+5	; 0x05
     960:	5f 93       	push	r21
     962:	1f 92       	push	r1
     964:	4f 93       	push	r20
     966:	1f 92       	push	r1
     968:	3f 93       	push	r19
     96a:	1f 92       	push	r1
     96c:	2f 93       	push	r18
     96e:	1f 92       	push	r1
     970:	9f 93       	push	r25
     972:	1f 92       	push	r1
     974:	8f 93       	push	r24
     976:	84 ec       	ldi	r24, 0xC4	; 196
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	8d e6       	ldi	r24, 0x6D	; 109
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	9f 93       	push	r25
     984:	8f 93       	push	r24
     986:	a8 d0       	rcall	.+336    	; 0xad8 <sprintf>
		
		blink_divider = 0;
		vfd_set_cursor(1,0);
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	52 df       	rcall	.-348    	; 0x832 <vfd_set_cursor>
		vfd_string((uint8_t *)vfd.first_line);
     98e:	8d e6       	ldi	r24, 0x6D	; 109
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	5c df       	rcall	.-328    	; 0x84c <vfd_string>
		vfd_set_cursor(2,0);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	4c df       	rcall	.-360    	; 0x832 <vfd_set_cursor>
		vfd_string((uint8_t *)vfd.second_line);
     99a:	8d e8       	ldi	r24, 0x8D	; 141
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	56 df       	rcall	.-340    	; 0x84c <vfd_string>
     9a0:	8d b7       	in	r24, 0x3d	; 61
     9a2:	9e b7       	in	r25, 0x3e	; 62
     9a4:	40 96       	adiw	r24, 0x10	; 16
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	9e bf       	out	0x3e, r25	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	8d bf       	out	0x3d, r24	; 61
     9b0:	b6 cf       	rjmp	.-148    	; 0x91e <main+0xa2>

000009b2 <__udivmodsi4>:
     9b2:	a1 e2       	ldi	r26, 0x21	; 33
     9b4:	1a 2e       	mov	r1, r26
     9b6:	aa 1b       	sub	r26, r26
     9b8:	bb 1b       	sub	r27, r27
     9ba:	fd 01       	movw	r30, r26
     9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <__udivmodsi4_ep>

000009be <__udivmodsi4_loop>:
     9be:	aa 1f       	adc	r26, r26
     9c0:	bb 1f       	adc	r27, r27
     9c2:	ee 1f       	adc	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	a2 17       	cp	r26, r18
     9c8:	b3 07       	cpc	r27, r19
     9ca:	e4 07       	cpc	r30, r20
     9cc:	f5 07       	cpc	r31, r21
     9ce:	20 f0       	brcs	.+8      	; 0x9d8 <__udivmodsi4_ep>
     9d0:	a2 1b       	sub	r26, r18
     9d2:	b3 0b       	sbc	r27, r19
     9d4:	e4 0b       	sbc	r30, r20
     9d6:	f5 0b       	sbc	r31, r21

000009d8 <__udivmodsi4_ep>:
     9d8:	66 1f       	adc	r22, r22
     9da:	77 1f       	adc	r23, r23
     9dc:	88 1f       	adc	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	1a 94       	dec	r1
     9e2:	69 f7       	brne	.-38     	; 0x9be <__udivmodsi4_loop>
     9e4:	60 95       	com	r22
     9e6:	70 95       	com	r23
     9e8:	80 95       	com	r24
     9ea:	90 95       	com	r25
     9ec:	9b 01       	movw	r18, r22
     9ee:	ac 01       	movw	r20, r24
     9f0:	bd 01       	movw	r22, r26
     9f2:	cf 01       	movw	r24, r30
     9f4:	08 95       	ret

000009f6 <__muluhisi3>:
     9f6:	09 d0       	rcall	.+18     	; 0xa0a <__umulhisi3>
     9f8:	a5 9f       	mul	r26, r21
     9fa:	90 0d       	add	r25, r0
     9fc:	b4 9f       	mul	r27, r20
     9fe:	90 0d       	add	r25, r0
     a00:	a4 9f       	mul	r26, r20
     a02:	80 0d       	add	r24, r0
     a04:	91 1d       	adc	r25, r1
     a06:	11 24       	eor	r1, r1
     a08:	08 95       	ret

00000a0a <__umulhisi3>:
     a0a:	a2 9f       	mul	r26, r18
     a0c:	b0 01       	movw	r22, r0
     a0e:	b3 9f       	mul	r27, r19
     a10:	c0 01       	movw	r24, r0
     a12:	a3 9f       	mul	r26, r19
     a14:	01 d0       	rcall	.+2      	; 0xa18 <__umulhisi3+0xe>
     a16:	b2 9f       	mul	r27, r18
     a18:	70 0d       	add	r23, r0
     a1a:	81 1d       	adc	r24, r1
     a1c:	11 24       	eor	r1, r1
     a1e:	91 1d       	adc	r25, r1
     a20:	08 95       	ret

00000a22 <atoi>:
     a22:	fc 01       	movw	r30, r24
     a24:	88 27       	eor	r24, r24
     a26:	99 27       	eor	r25, r25
     a28:	e8 94       	clt
     a2a:	21 91       	ld	r18, Z+
     a2c:	20 32       	cpi	r18, 0x20	; 32
     a2e:	e9 f3       	breq	.-6      	; 0xa2a <atoi+0x8>
     a30:	29 30       	cpi	r18, 0x09	; 9
     a32:	10 f0       	brcs	.+4      	; 0xa38 <atoi+0x16>
     a34:	2e 30       	cpi	r18, 0x0E	; 14
     a36:	c8 f3       	brcs	.-14     	; 0xa2a <atoi+0x8>
     a38:	2b 32       	cpi	r18, 0x2B	; 43
     a3a:	39 f0       	breq	.+14     	; 0xa4a <atoi+0x28>
     a3c:	2d 32       	cpi	r18, 0x2D	; 45
     a3e:	31 f4       	brne	.+12     	; 0xa4c <atoi+0x2a>
     a40:	68 94       	set
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <atoi+0x28>
     a44:	41 d0       	rcall	.+130    	; 0xac8 <__mulhi_const_10>
     a46:	82 0f       	add	r24, r18
     a48:	91 1d       	adc	r25, r1
     a4a:	21 91       	ld	r18, Z+
     a4c:	20 53       	subi	r18, 0x30	; 48
     a4e:	2a 30       	cpi	r18, 0x0A	; 10
     a50:	c8 f3       	brcs	.-14     	; 0xa44 <atoi+0x22>
     a52:	1e f4       	brtc	.+6      	; 0xa5a <atoi+0x38>
     a54:	90 95       	com	r25
     a56:	81 95       	neg	r24
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	08 95       	ret

00000a5c <strncpy>:
     a5c:	fb 01       	movw	r30, r22
     a5e:	dc 01       	movw	r26, r24
     a60:	41 50       	subi	r20, 0x01	; 1
     a62:	50 40       	sbci	r21, 0x00	; 0
     a64:	48 f0       	brcs	.+18     	; 0xa78 <strncpy+0x1c>
     a66:	01 90       	ld	r0, Z+
     a68:	0d 92       	st	X+, r0
     a6a:	00 20       	and	r0, r0
     a6c:	c9 f7       	brne	.-14     	; 0xa60 <strncpy+0x4>
     a6e:	01 c0       	rjmp	.+2      	; 0xa72 <strncpy+0x16>
     a70:	1d 92       	st	X+, r1
     a72:	41 50       	subi	r20, 0x01	; 1
     a74:	50 40       	sbci	r21, 0x00	; 0
     a76:	e0 f7       	brcc	.-8      	; 0xa70 <strncpy+0x14>
     a78:	08 95       	ret

00000a7a <strtok_r>:
     a7a:	fa 01       	movw	r30, r20
     a7c:	a1 91       	ld	r26, Z+
     a7e:	b0 81       	ld	r27, Z
     a80:	00 97       	sbiw	r24, 0x00	; 0
     a82:	19 f4       	brne	.+6      	; 0xa8a <strtok_r+0x10>
     a84:	10 97       	sbiw	r26, 0x00	; 0
     a86:	e1 f0       	breq	.+56     	; 0xac0 <strtok_r+0x46>
     a88:	cd 01       	movw	r24, r26
     a8a:	dc 01       	movw	r26, r24
     a8c:	cd 01       	movw	r24, r26
     a8e:	0d 90       	ld	r0, X+
     a90:	00 20       	and	r0, r0
     a92:	11 f4       	brne	.+4      	; 0xa98 <strtok_r+0x1e>
     a94:	c0 01       	movw	r24, r0
     a96:	13 c0       	rjmp	.+38     	; 0xabe <strtok_r+0x44>
     a98:	fb 01       	movw	r30, r22
     a9a:	21 91       	ld	r18, Z+
     a9c:	22 23       	and	r18, r18
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <strtok_r+0x2c>
     aa0:	20 15       	cp	r18, r0
     aa2:	d9 f7       	brne	.-10     	; 0xa9a <strtok_r+0x20>
     aa4:	f3 cf       	rjmp	.-26     	; 0xa8c <strtok_r+0x12>
     aa6:	fb 01       	movw	r30, r22
     aa8:	21 91       	ld	r18, Z+
     aaa:	20 15       	cp	r18, r0
     aac:	19 f4       	brne	.+6      	; 0xab4 <strtok_r+0x3a>
     aae:	1e 92       	st	-X, r1
     ab0:	11 96       	adiw	r26, 0x01	; 1
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <strtok_r+0x46>
     ab4:	22 23       	and	r18, r18
     ab6:	c1 f7       	brne	.-16     	; 0xaa8 <strtok_r+0x2e>
     ab8:	0d 90       	ld	r0, X+
     aba:	00 20       	and	r0, r0
     abc:	a1 f7       	brne	.-24     	; 0xaa6 <strtok_r+0x2c>
     abe:	d0 01       	movw	r26, r0
     ac0:	fa 01       	movw	r30, r20
     ac2:	a1 93       	st	Z+, r26
     ac4:	b0 83       	st	Z, r27
     ac6:	08 95       	ret

00000ac8 <__mulhi_const_10>:
     ac8:	7a e0       	ldi	r23, 0x0A	; 10
     aca:	97 9f       	mul	r25, r23
     acc:	90 2d       	mov	r25, r0
     ace:	87 9f       	mul	r24, r23
     ad0:	80 2d       	mov	r24, r0
     ad2:	91 0d       	add	r25, r1
     ad4:	11 24       	eor	r1, r1
     ad6:	08 95       	ret

00000ad8 <sprintf>:
     ad8:	ae e0       	ldi	r26, 0x0E	; 14
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	e1 e7       	ldi	r30, 0x71	; 113
     ade:	f5 e0       	ldi	r31, 0x05	; 5
     ae0:	aa c2       	rjmp	.+1364   	; 0x1036 <__prologue_saves__+0x1c>
     ae2:	0d 89       	ldd	r16, Y+21	; 0x15
     ae4:	1e 89       	ldd	r17, Y+22	; 0x16
     ae6:	86 e0       	ldi	r24, 0x06	; 6
     ae8:	8c 83       	std	Y+4, r24	; 0x04
     aea:	1a 83       	std	Y+2, r17	; 0x02
     aec:	09 83       	std	Y+1, r16	; 0x01
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	9f e7       	ldi	r25, 0x7F	; 127
     af2:	9e 83       	std	Y+6, r25	; 0x06
     af4:	8d 83       	std	Y+5, r24	; 0x05
     af6:	ae 01       	movw	r20, r28
     af8:	47 5e       	subi	r20, 0xE7	; 231
     afa:	5f 4f       	sbci	r21, 0xFF	; 255
     afc:	6f 89       	ldd	r22, Y+23	; 0x17
     afe:	78 8d       	ldd	r23, Y+24	; 0x18
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	08 d0       	rcall	.+16     	; 0xb16 <vfprintf>
     b06:	ef 81       	ldd	r30, Y+7	; 0x07
     b08:	f8 85       	ldd	r31, Y+8	; 0x08
     b0a:	e0 0f       	add	r30, r16
     b0c:	f1 1f       	adc	r31, r17
     b0e:	10 82       	st	Z, r1
     b10:	2e 96       	adiw	r28, 0x0e	; 14
     b12:	e4 e0       	ldi	r30, 0x04	; 4
     b14:	ac c2       	rjmp	.+1368   	; 0x106e <__epilogue_restores__+0x1c>

00000b16 <vfprintf>:
     b16:	ab e0       	ldi	r26, 0x0B	; 11
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e0 e9       	ldi	r30, 0x90	; 144
     b1c:	f5 e0       	ldi	r31, 0x05	; 5
     b1e:	7d c2       	rjmp	.+1274   	; 0x101a <__prologue_saves__>
     b20:	6c 01       	movw	r12, r24
     b22:	7b 01       	movw	r14, r22
     b24:	8a 01       	movw	r16, r20
     b26:	fc 01       	movw	r30, r24
     b28:	17 82       	std	Z+7, r1	; 0x07
     b2a:	16 82       	std	Z+6, r1	; 0x06
     b2c:	83 81       	ldd	r24, Z+3	; 0x03
     b2e:	81 ff       	sbrs	r24, 1
     b30:	bf c1       	rjmp	.+894    	; 0xeb0 <vfprintf+0x39a>
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	3c 01       	movw	r6, r24
     b38:	f6 01       	movw	r30, r12
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	f7 01       	movw	r30, r14
     b3e:	93 fd       	sbrc	r25, 3
     b40:	85 91       	lpm	r24, Z+
     b42:	93 ff       	sbrs	r25, 3
     b44:	81 91       	ld	r24, Z+
     b46:	7f 01       	movw	r14, r30
     b48:	88 23       	and	r24, r24
     b4a:	09 f4       	brne	.+2      	; 0xb4e <vfprintf+0x38>
     b4c:	ad c1       	rjmp	.+858    	; 0xea8 <vfprintf+0x392>
     b4e:	85 32       	cpi	r24, 0x25	; 37
     b50:	39 f4       	brne	.+14     	; 0xb60 <vfprintf+0x4a>
     b52:	93 fd       	sbrc	r25, 3
     b54:	85 91       	lpm	r24, Z+
     b56:	93 ff       	sbrs	r25, 3
     b58:	81 91       	ld	r24, Z+
     b5a:	7f 01       	movw	r14, r30
     b5c:	85 32       	cpi	r24, 0x25	; 37
     b5e:	21 f4       	brne	.+8      	; 0xb68 <vfprintf+0x52>
     b60:	b6 01       	movw	r22, r12
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	c0 d1       	rcall	.+896    	; 0xee6 <fputc>
     b66:	e8 cf       	rjmp	.-48     	; 0xb38 <vfprintf+0x22>
     b68:	91 2c       	mov	r9, r1
     b6a:	21 2c       	mov	r2, r1
     b6c:	31 2c       	mov	r3, r1
     b6e:	ff e1       	ldi	r31, 0x1F	; 31
     b70:	f3 15       	cp	r31, r3
     b72:	d8 f0       	brcs	.+54     	; 0xbaa <vfprintf+0x94>
     b74:	8b 32       	cpi	r24, 0x2B	; 43
     b76:	79 f0       	breq	.+30     	; 0xb96 <vfprintf+0x80>
     b78:	38 f4       	brcc	.+14     	; 0xb88 <vfprintf+0x72>
     b7a:	80 32       	cpi	r24, 0x20	; 32
     b7c:	79 f0       	breq	.+30     	; 0xb9c <vfprintf+0x86>
     b7e:	83 32       	cpi	r24, 0x23	; 35
     b80:	a1 f4       	brne	.+40     	; 0xbaa <vfprintf+0x94>
     b82:	23 2d       	mov	r18, r3
     b84:	20 61       	ori	r18, 0x10	; 16
     b86:	1d c0       	rjmp	.+58     	; 0xbc2 <vfprintf+0xac>
     b88:	8d 32       	cpi	r24, 0x2D	; 45
     b8a:	61 f0       	breq	.+24     	; 0xba4 <vfprintf+0x8e>
     b8c:	80 33       	cpi	r24, 0x30	; 48
     b8e:	69 f4       	brne	.+26     	; 0xbaa <vfprintf+0x94>
     b90:	23 2d       	mov	r18, r3
     b92:	21 60       	ori	r18, 0x01	; 1
     b94:	16 c0       	rjmp	.+44     	; 0xbc2 <vfprintf+0xac>
     b96:	83 2d       	mov	r24, r3
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	38 2e       	mov	r3, r24
     b9c:	e3 2d       	mov	r30, r3
     b9e:	e4 60       	ori	r30, 0x04	; 4
     ba0:	3e 2e       	mov	r3, r30
     ba2:	2a c0       	rjmp	.+84     	; 0xbf8 <vfprintf+0xe2>
     ba4:	f3 2d       	mov	r31, r3
     ba6:	f8 60       	ori	r31, 0x08	; 8
     ba8:	1d c0       	rjmp	.+58     	; 0xbe4 <vfprintf+0xce>
     baa:	37 fc       	sbrc	r3, 7
     bac:	2d c0       	rjmp	.+90     	; 0xc08 <vfprintf+0xf2>
     bae:	20 ed       	ldi	r18, 0xD0	; 208
     bb0:	28 0f       	add	r18, r24
     bb2:	2a 30       	cpi	r18, 0x0A	; 10
     bb4:	40 f0       	brcs	.+16     	; 0xbc6 <vfprintf+0xb0>
     bb6:	8e 32       	cpi	r24, 0x2E	; 46
     bb8:	b9 f4       	brne	.+46     	; 0xbe8 <vfprintf+0xd2>
     bba:	36 fc       	sbrc	r3, 6
     bbc:	75 c1       	rjmp	.+746    	; 0xea8 <vfprintf+0x392>
     bbe:	23 2d       	mov	r18, r3
     bc0:	20 64       	ori	r18, 0x40	; 64
     bc2:	32 2e       	mov	r3, r18
     bc4:	19 c0       	rjmp	.+50     	; 0xbf8 <vfprintf+0xe2>
     bc6:	36 fe       	sbrs	r3, 6
     bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <vfprintf+0xc0>
     bca:	8a e0       	ldi	r24, 0x0A	; 10
     bcc:	98 9e       	mul	r9, r24
     bce:	20 0d       	add	r18, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	92 2e       	mov	r9, r18
     bd4:	11 c0       	rjmp	.+34     	; 0xbf8 <vfprintf+0xe2>
     bd6:	ea e0       	ldi	r30, 0x0A	; 10
     bd8:	2e 9e       	mul	r2, r30
     bda:	20 0d       	add	r18, r0
     bdc:	11 24       	eor	r1, r1
     bde:	22 2e       	mov	r2, r18
     be0:	f3 2d       	mov	r31, r3
     be2:	f0 62       	ori	r31, 0x20	; 32
     be4:	3f 2e       	mov	r3, r31
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <vfprintf+0xe2>
     be8:	8c 36       	cpi	r24, 0x6C	; 108
     bea:	21 f4       	brne	.+8      	; 0xbf4 <vfprintf+0xde>
     bec:	83 2d       	mov	r24, r3
     bee:	80 68       	ori	r24, 0x80	; 128
     bf0:	38 2e       	mov	r3, r24
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <vfprintf+0xe2>
     bf4:	88 36       	cpi	r24, 0x68	; 104
     bf6:	41 f4       	brne	.+16     	; 0xc08 <vfprintf+0xf2>
     bf8:	f7 01       	movw	r30, r14
     bfa:	93 fd       	sbrc	r25, 3
     bfc:	85 91       	lpm	r24, Z+
     bfe:	93 ff       	sbrs	r25, 3
     c00:	81 91       	ld	r24, Z+
     c02:	7f 01       	movw	r14, r30
     c04:	81 11       	cpse	r24, r1
     c06:	b3 cf       	rjmp	.-154    	; 0xb6e <vfprintf+0x58>
     c08:	98 2f       	mov	r25, r24
     c0a:	9f 7d       	andi	r25, 0xDF	; 223
     c0c:	95 54       	subi	r25, 0x45	; 69
     c0e:	93 30       	cpi	r25, 0x03	; 3
     c10:	28 f4       	brcc	.+10     	; 0xc1c <vfprintf+0x106>
     c12:	0c 5f       	subi	r16, 0xFC	; 252
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	9f e3       	ldi	r25, 0x3F	; 63
     c18:	99 83       	std	Y+1, r25	; 0x01
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <vfprintf+0x120>
     c1c:	83 36       	cpi	r24, 0x63	; 99
     c1e:	31 f0       	breq	.+12     	; 0xc2c <vfprintf+0x116>
     c20:	83 37       	cpi	r24, 0x73	; 115
     c22:	71 f0       	breq	.+28     	; 0xc40 <vfprintf+0x12a>
     c24:	83 35       	cpi	r24, 0x53	; 83
     c26:	09 f0       	breq	.+2      	; 0xc2a <vfprintf+0x114>
     c28:	55 c0       	rjmp	.+170    	; 0xcd4 <vfprintf+0x1be>
     c2a:	20 c0       	rjmp	.+64     	; 0xc6c <vfprintf+0x156>
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 81       	ld	r24, Z
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	0e 5f       	subi	r16, 0xFE	; 254
     c34:	1f 4f       	sbci	r17, 0xFF	; 255
     c36:	88 24       	eor	r8, r8
     c38:	83 94       	inc	r8
     c3a:	91 2c       	mov	r9, r1
     c3c:	53 01       	movw	r10, r6
     c3e:	12 c0       	rjmp	.+36     	; 0xc64 <vfprintf+0x14e>
     c40:	28 01       	movw	r4, r16
     c42:	f2 e0       	ldi	r31, 0x02	; 2
     c44:	4f 0e       	add	r4, r31
     c46:	51 1c       	adc	r5, r1
     c48:	f8 01       	movw	r30, r16
     c4a:	a0 80       	ld	r10, Z
     c4c:	b1 80       	ldd	r11, Z+1	; 0x01
     c4e:	36 fe       	sbrs	r3, 6
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <vfprintf+0x142>
     c52:	69 2d       	mov	r22, r9
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <vfprintf+0x146>
     c58:	6f ef       	ldi	r22, 0xFF	; 255
     c5a:	7f ef       	ldi	r23, 0xFF	; 255
     c5c:	c5 01       	movw	r24, r10
     c5e:	38 d1       	rcall	.+624    	; 0xed0 <strnlen>
     c60:	4c 01       	movw	r8, r24
     c62:	82 01       	movw	r16, r4
     c64:	f3 2d       	mov	r31, r3
     c66:	ff 77       	andi	r31, 0x7F	; 127
     c68:	3f 2e       	mov	r3, r31
     c6a:	15 c0       	rjmp	.+42     	; 0xc96 <vfprintf+0x180>
     c6c:	28 01       	movw	r4, r16
     c6e:	22 e0       	ldi	r18, 0x02	; 2
     c70:	42 0e       	add	r4, r18
     c72:	51 1c       	adc	r5, r1
     c74:	f8 01       	movw	r30, r16
     c76:	a0 80       	ld	r10, Z
     c78:	b1 80       	ldd	r11, Z+1	; 0x01
     c7a:	36 fe       	sbrs	r3, 6
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <vfprintf+0x16e>
     c7e:	69 2d       	mov	r22, r9
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0x172>
     c84:	6f ef       	ldi	r22, 0xFF	; 255
     c86:	7f ef       	ldi	r23, 0xFF	; 255
     c88:	c5 01       	movw	r24, r10
     c8a:	17 d1       	rcall	.+558    	; 0xeba <strnlen_P>
     c8c:	4c 01       	movw	r8, r24
     c8e:	f3 2d       	mov	r31, r3
     c90:	f0 68       	ori	r31, 0x80	; 128
     c92:	3f 2e       	mov	r3, r31
     c94:	82 01       	movw	r16, r4
     c96:	33 fc       	sbrc	r3, 3
     c98:	19 c0       	rjmp	.+50     	; 0xccc <vfprintf+0x1b6>
     c9a:	82 2d       	mov	r24, r2
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	88 16       	cp	r8, r24
     ca0:	99 06       	cpc	r9, r25
     ca2:	a0 f4       	brcc	.+40     	; 0xccc <vfprintf+0x1b6>
     ca4:	b6 01       	movw	r22, r12
     ca6:	80 e2       	ldi	r24, 0x20	; 32
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	1d d1       	rcall	.+570    	; 0xee6 <fputc>
     cac:	2a 94       	dec	r2
     cae:	f5 cf       	rjmp	.-22     	; 0xc9a <vfprintf+0x184>
     cb0:	f5 01       	movw	r30, r10
     cb2:	37 fc       	sbrc	r3, 7
     cb4:	85 91       	lpm	r24, Z+
     cb6:	37 fe       	sbrs	r3, 7
     cb8:	81 91       	ld	r24, Z+
     cba:	5f 01       	movw	r10, r30
     cbc:	b6 01       	movw	r22, r12
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	12 d1       	rcall	.+548    	; 0xee6 <fputc>
     cc2:	21 10       	cpse	r2, r1
     cc4:	2a 94       	dec	r2
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	82 1a       	sub	r8, r18
     cca:	91 08       	sbc	r9, r1
     ccc:	81 14       	cp	r8, r1
     cce:	91 04       	cpc	r9, r1
     cd0:	79 f7       	brne	.-34     	; 0xcb0 <vfprintf+0x19a>
     cd2:	e1 c0       	rjmp	.+450    	; 0xe96 <vfprintf+0x380>
     cd4:	84 36       	cpi	r24, 0x64	; 100
     cd6:	11 f0       	breq	.+4      	; 0xcdc <vfprintf+0x1c6>
     cd8:	89 36       	cpi	r24, 0x69	; 105
     cda:	39 f5       	brne	.+78     	; 0xd2a <vfprintf+0x214>
     cdc:	f8 01       	movw	r30, r16
     cde:	37 fe       	sbrs	r3, 7
     ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <vfprintf+0x1da>
     ce2:	60 81       	ld	r22, Z
     ce4:	71 81       	ldd	r23, Z+1	; 0x01
     ce6:	82 81       	ldd	r24, Z+2	; 0x02
     ce8:	93 81       	ldd	r25, Z+3	; 0x03
     cea:	0c 5f       	subi	r16, 0xFC	; 252
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	08 c0       	rjmp	.+16     	; 0xd00 <vfprintf+0x1ea>
     cf0:	60 81       	ld	r22, Z
     cf2:	71 81       	ldd	r23, Z+1	; 0x01
     cf4:	07 2e       	mov	r0, r23
     cf6:	00 0c       	add	r0, r0
     cf8:	88 0b       	sbc	r24, r24
     cfa:	99 0b       	sbc	r25, r25
     cfc:	0e 5f       	subi	r16, 0xFE	; 254
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	f3 2d       	mov	r31, r3
     d02:	ff 76       	andi	r31, 0x6F	; 111
     d04:	3f 2e       	mov	r3, r31
     d06:	97 ff       	sbrs	r25, 7
     d08:	09 c0       	rjmp	.+18     	; 0xd1c <vfprintf+0x206>
     d0a:	90 95       	com	r25
     d0c:	80 95       	com	r24
     d0e:	70 95       	com	r23
     d10:	61 95       	neg	r22
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	8f 4f       	sbci	r24, 0xFF	; 255
     d16:	9f 4f       	sbci	r25, 0xFF	; 255
     d18:	f0 68       	ori	r31, 0x80	; 128
     d1a:	3f 2e       	mov	r3, r31
     d1c:	2a e0       	ldi	r18, 0x0A	; 10
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	a3 01       	movw	r20, r6
     d22:	1d d1       	rcall	.+570    	; 0xf5e <__ultoa_invert>
     d24:	88 2e       	mov	r8, r24
     d26:	86 18       	sub	r8, r6
     d28:	44 c0       	rjmp	.+136    	; 0xdb2 <vfprintf+0x29c>
     d2a:	85 37       	cpi	r24, 0x75	; 117
     d2c:	31 f4       	brne	.+12     	; 0xd3a <vfprintf+0x224>
     d2e:	23 2d       	mov	r18, r3
     d30:	2f 7e       	andi	r18, 0xEF	; 239
     d32:	b2 2e       	mov	r11, r18
     d34:	2a e0       	ldi	r18, 0x0A	; 10
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	25 c0       	rjmp	.+74     	; 0xd84 <vfprintf+0x26e>
     d3a:	93 2d       	mov	r25, r3
     d3c:	99 7f       	andi	r25, 0xF9	; 249
     d3e:	b9 2e       	mov	r11, r25
     d40:	8f 36       	cpi	r24, 0x6F	; 111
     d42:	c1 f0       	breq	.+48     	; 0xd74 <vfprintf+0x25e>
     d44:	18 f4       	brcc	.+6      	; 0xd4c <vfprintf+0x236>
     d46:	88 35       	cpi	r24, 0x58	; 88
     d48:	79 f0       	breq	.+30     	; 0xd68 <vfprintf+0x252>
     d4a:	ae c0       	rjmp	.+348    	; 0xea8 <vfprintf+0x392>
     d4c:	80 37       	cpi	r24, 0x70	; 112
     d4e:	19 f0       	breq	.+6      	; 0xd56 <vfprintf+0x240>
     d50:	88 37       	cpi	r24, 0x78	; 120
     d52:	21 f0       	breq	.+8      	; 0xd5c <vfprintf+0x246>
     d54:	a9 c0       	rjmp	.+338    	; 0xea8 <vfprintf+0x392>
     d56:	e9 2f       	mov	r30, r25
     d58:	e0 61       	ori	r30, 0x10	; 16
     d5a:	be 2e       	mov	r11, r30
     d5c:	b4 fe       	sbrs	r11, 4
     d5e:	0d c0       	rjmp	.+26     	; 0xd7a <vfprintf+0x264>
     d60:	fb 2d       	mov	r31, r11
     d62:	f4 60       	ori	r31, 0x04	; 4
     d64:	bf 2e       	mov	r11, r31
     d66:	09 c0       	rjmp	.+18     	; 0xd7a <vfprintf+0x264>
     d68:	34 fe       	sbrs	r3, 4
     d6a:	0a c0       	rjmp	.+20     	; 0xd80 <vfprintf+0x26a>
     d6c:	29 2f       	mov	r18, r25
     d6e:	26 60       	ori	r18, 0x06	; 6
     d70:	b2 2e       	mov	r11, r18
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <vfprintf+0x26a>
     d74:	28 e0       	ldi	r18, 0x08	; 8
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	05 c0       	rjmp	.+10     	; 0xd84 <vfprintf+0x26e>
     d7a:	20 e1       	ldi	r18, 0x10	; 16
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <vfprintf+0x26e>
     d80:	20 e1       	ldi	r18, 0x10	; 16
     d82:	32 e0       	ldi	r19, 0x02	; 2
     d84:	f8 01       	movw	r30, r16
     d86:	b7 fe       	sbrs	r11, 7
     d88:	07 c0       	rjmp	.+14     	; 0xd98 <vfprintf+0x282>
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	0c 5f       	subi	r16, 0xFC	; 252
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <vfprintf+0x28e>
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 5f       	subi	r16, 0xFE	; 254
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	a3 01       	movw	r20, r6
     da6:	db d0       	rcall	.+438    	; 0xf5e <__ultoa_invert>
     da8:	88 2e       	mov	r8, r24
     daa:	86 18       	sub	r8, r6
     dac:	fb 2d       	mov	r31, r11
     dae:	ff 77       	andi	r31, 0x7F	; 127
     db0:	3f 2e       	mov	r3, r31
     db2:	36 fe       	sbrs	r3, 6
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <vfprintf+0x2ba>
     db6:	23 2d       	mov	r18, r3
     db8:	2e 7f       	andi	r18, 0xFE	; 254
     dba:	a2 2e       	mov	r10, r18
     dbc:	89 14       	cp	r8, r9
     dbe:	58 f4       	brcc	.+22     	; 0xdd6 <vfprintf+0x2c0>
     dc0:	34 fe       	sbrs	r3, 4
     dc2:	0b c0       	rjmp	.+22     	; 0xdda <vfprintf+0x2c4>
     dc4:	32 fc       	sbrc	r3, 2
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <vfprintf+0x2c4>
     dc8:	83 2d       	mov	r24, r3
     dca:	8e 7e       	andi	r24, 0xEE	; 238
     dcc:	a8 2e       	mov	r10, r24
     dce:	05 c0       	rjmp	.+10     	; 0xdda <vfprintf+0x2c4>
     dd0:	b8 2c       	mov	r11, r8
     dd2:	a3 2c       	mov	r10, r3
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <vfprintf+0x2c6>
     dd6:	b8 2c       	mov	r11, r8
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <vfprintf+0x2c6>
     dda:	b9 2c       	mov	r11, r9
     ddc:	a4 fe       	sbrs	r10, 4
     dde:	0f c0       	rjmp	.+30     	; 0xdfe <vfprintf+0x2e8>
     de0:	fe 01       	movw	r30, r28
     de2:	e8 0d       	add	r30, r8
     de4:	f1 1d       	adc	r31, r1
     de6:	80 81       	ld	r24, Z
     de8:	80 33       	cpi	r24, 0x30	; 48
     dea:	21 f4       	brne	.+8      	; 0xdf4 <vfprintf+0x2de>
     dec:	9a 2d       	mov	r25, r10
     dee:	99 7e       	andi	r25, 0xE9	; 233
     df0:	a9 2e       	mov	r10, r25
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <vfprintf+0x2f0>
     df4:	a2 fe       	sbrs	r10, 2
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0x2ee>
     df8:	b3 94       	inc	r11
     dfa:	b3 94       	inc	r11
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <vfprintf+0x2f0>
     dfe:	8a 2d       	mov	r24, r10
     e00:	86 78       	andi	r24, 0x86	; 134
     e02:	09 f0       	breq	.+2      	; 0xe06 <vfprintf+0x2f0>
     e04:	b3 94       	inc	r11
     e06:	a3 fc       	sbrc	r10, 3
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <vfprintf+0x314>
     e0a:	a0 fe       	sbrs	r10, 0
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <vfprintf+0x304>
     e0e:	b2 14       	cp	r11, r2
     e10:	80 f4       	brcc	.+32     	; 0xe32 <vfprintf+0x31c>
     e12:	28 0c       	add	r2, r8
     e14:	92 2c       	mov	r9, r2
     e16:	9b 18       	sub	r9, r11
     e18:	0d c0       	rjmp	.+26     	; 0xe34 <vfprintf+0x31e>
     e1a:	b2 14       	cp	r11, r2
     e1c:	58 f4       	brcc	.+22     	; 0xe34 <vfprintf+0x31e>
     e1e:	b6 01       	movw	r22, r12
     e20:	80 e2       	ldi	r24, 0x20	; 32
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	60 d0       	rcall	.+192    	; 0xee6 <fputc>
     e26:	b3 94       	inc	r11
     e28:	f8 cf       	rjmp	.-16     	; 0xe1a <vfprintf+0x304>
     e2a:	b2 14       	cp	r11, r2
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <vfprintf+0x31e>
     e2e:	2b 18       	sub	r2, r11
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <vfprintf+0x320>
     e32:	98 2c       	mov	r9, r8
     e34:	21 2c       	mov	r2, r1
     e36:	a4 fe       	sbrs	r10, 4
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <vfprintf+0x342>
     e3a:	b6 01       	movw	r22, r12
     e3c:	80 e3       	ldi	r24, 0x30	; 48
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	52 d0       	rcall	.+164    	; 0xee6 <fputc>
     e42:	a2 fe       	sbrs	r10, 2
     e44:	16 c0       	rjmp	.+44     	; 0xe72 <vfprintf+0x35c>
     e46:	a1 fc       	sbrc	r10, 1
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <vfprintf+0x33a>
     e4a:	88 e7       	ldi	r24, 0x78	; 120
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <vfprintf+0x33e>
     e50:	88 e5       	ldi	r24, 0x58	; 88
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	b6 01       	movw	r22, r12
     e56:	0c c0       	rjmp	.+24     	; 0xe70 <vfprintf+0x35a>
     e58:	8a 2d       	mov	r24, r10
     e5a:	86 78       	andi	r24, 0x86	; 134
     e5c:	51 f0       	breq	.+20     	; 0xe72 <vfprintf+0x35c>
     e5e:	a1 fe       	sbrs	r10, 1
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x350>
     e62:	8b e2       	ldi	r24, 0x2B	; 43
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <vfprintf+0x352>
     e66:	80 e2       	ldi	r24, 0x20	; 32
     e68:	a7 fc       	sbrc	r10, 7
     e6a:	8d e2       	ldi	r24, 0x2D	; 45
     e6c:	b6 01       	movw	r22, r12
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	3a d0       	rcall	.+116    	; 0xee6 <fputc>
     e72:	89 14       	cp	r8, r9
     e74:	30 f4       	brcc	.+12     	; 0xe82 <vfprintf+0x36c>
     e76:	b6 01       	movw	r22, r12
     e78:	80 e3       	ldi	r24, 0x30	; 48
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	34 d0       	rcall	.+104    	; 0xee6 <fputc>
     e7e:	9a 94       	dec	r9
     e80:	f8 cf       	rjmp	.-16     	; 0xe72 <vfprintf+0x35c>
     e82:	8a 94       	dec	r8
     e84:	f3 01       	movw	r30, r6
     e86:	e8 0d       	add	r30, r8
     e88:	f1 1d       	adc	r31, r1
     e8a:	80 81       	ld	r24, Z
     e8c:	b6 01       	movw	r22, r12
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	2a d0       	rcall	.+84     	; 0xee6 <fputc>
     e92:	81 10       	cpse	r8, r1
     e94:	f6 cf       	rjmp	.-20     	; 0xe82 <vfprintf+0x36c>
     e96:	22 20       	and	r2, r2
     e98:	09 f4       	brne	.+2      	; 0xe9c <vfprintf+0x386>
     e9a:	4e ce       	rjmp	.-868    	; 0xb38 <vfprintf+0x22>
     e9c:	b6 01       	movw	r22, r12
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	21 d0       	rcall	.+66     	; 0xee6 <fputc>
     ea4:	2a 94       	dec	r2
     ea6:	f7 cf       	rjmp	.-18     	; 0xe96 <vfprintf+0x380>
     ea8:	f6 01       	movw	r30, r12
     eaa:	86 81       	ldd	r24, Z+6	; 0x06
     eac:	97 81       	ldd	r25, Z+7	; 0x07
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <vfprintf+0x39e>
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	9f ef       	ldi	r25, 0xFF	; 255
     eb4:	2b 96       	adiw	r28, 0x0b	; 11
     eb6:	e2 e1       	ldi	r30, 0x12	; 18
     eb8:	cc c0       	rjmp	.+408    	; 0x1052 <__epilogue_restores__>

00000eba <strnlen_P>:
     eba:	fc 01       	movw	r30, r24
     ebc:	05 90       	lpm	r0, Z+
     ebe:	61 50       	subi	r22, 0x01	; 1
     ec0:	70 40       	sbci	r23, 0x00	; 0
     ec2:	01 10       	cpse	r0, r1
     ec4:	d8 f7       	brcc	.-10     	; 0xebc <strnlen_P+0x2>
     ec6:	80 95       	com	r24
     ec8:	90 95       	com	r25
     eca:	8e 0f       	add	r24, r30
     ecc:	9f 1f       	adc	r25, r31
     ece:	08 95       	ret

00000ed0 <strnlen>:
     ed0:	fc 01       	movw	r30, r24
     ed2:	61 50       	subi	r22, 0x01	; 1
     ed4:	70 40       	sbci	r23, 0x00	; 0
     ed6:	01 90       	ld	r0, Z+
     ed8:	01 10       	cpse	r0, r1
     eda:	d8 f7       	brcc	.-10     	; 0xed2 <strnlen+0x2>
     edc:	80 95       	com	r24
     ede:	90 95       	com	r25
     ee0:	8e 0f       	add	r24, r30
     ee2:	9f 1f       	adc	r25, r31
     ee4:	08 95       	ret

00000ee6 <fputc>:
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	fb 01       	movw	r30, r22
     ef0:	23 81       	ldd	r18, Z+3	; 0x03
     ef2:	21 fd       	sbrc	r18, 1
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <fputc+0x16>
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	2c c0       	rjmp	.+88     	; 0xf54 <fputc+0x6e>
     efc:	22 ff       	sbrs	r18, 2
     efe:	16 c0       	rjmp	.+44     	; 0xf2c <fputc+0x46>
     f00:	46 81       	ldd	r20, Z+6	; 0x06
     f02:	57 81       	ldd	r21, Z+7	; 0x07
     f04:	24 81       	ldd	r18, Z+4	; 0x04
     f06:	35 81       	ldd	r19, Z+5	; 0x05
     f08:	42 17       	cp	r20, r18
     f0a:	53 07       	cpc	r21, r19
     f0c:	44 f4       	brge	.+16     	; 0xf1e <fputc+0x38>
     f0e:	a0 81       	ld	r26, Z
     f10:	b1 81       	ldd	r27, Z+1	; 0x01
     f12:	9d 01       	movw	r18, r26
     f14:	2f 5f       	subi	r18, 0xFF	; 255
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	31 83       	std	Z+1, r19	; 0x01
     f1a:	20 83       	st	Z, r18
     f1c:	8c 93       	st	X, r24
     f1e:	26 81       	ldd	r18, Z+6	; 0x06
     f20:	37 81       	ldd	r19, Z+7	; 0x07
     f22:	2f 5f       	subi	r18, 0xFF	; 255
     f24:	3f 4f       	sbci	r19, 0xFF	; 255
     f26:	37 83       	std	Z+7, r19	; 0x07
     f28:	26 83       	std	Z+6, r18	; 0x06
     f2a:	14 c0       	rjmp	.+40     	; 0xf54 <fputc+0x6e>
     f2c:	8b 01       	movw	r16, r22
     f2e:	ec 01       	movw	r28, r24
     f30:	fb 01       	movw	r30, r22
     f32:	00 84       	ldd	r0, Z+8	; 0x08
     f34:	f1 85       	ldd	r31, Z+9	; 0x09
     f36:	e0 2d       	mov	r30, r0
     f38:	09 95       	icall
     f3a:	89 2b       	or	r24, r25
     f3c:	e1 f6       	brne	.-72     	; 0xef6 <fputc+0x10>
     f3e:	d8 01       	movw	r26, r16
     f40:	16 96       	adiw	r26, 0x06	; 6
     f42:	8d 91       	ld	r24, X+
     f44:	9c 91       	ld	r25, X
     f46:	17 97       	sbiw	r26, 0x07	; 7
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	17 96       	adiw	r26, 0x07	; 7
     f4c:	9c 93       	st	X, r25
     f4e:	8e 93       	st	-X, r24
     f50:	16 97       	sbiw	r26, 0x06	; 6
     f52:	ce 01       	movw	r24, r28
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	08 95       	ret

00000f5e <__ultoa_invert>:
     f5e:	fa 01       	movw	r30, r20
     f60:	aa 27       	eor	r26, r26
     f62:	28 30       	cpi	r18, 0x08	; 8
     f64:	51 f1       	breq	.+84     	; 0xfba <__ultoa_invert+0x5c>
     f66:	20 31       	cpi	r18, 0x10	; 16
     f68:	81 f1       	breq	.+96     	; 0xfca <__ultoa_invert+0x6c>
     f6a:	e8 94       	clt
     f6c:	6f 93       	push	r22
     f6e:	6e 7f       	andi	r22, 0xFE	; 254
     f70:	6e 5f       	subi	r22, 0xFE	; 254
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	8f 4f       	sbci	r24, 0xFF	; 255
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	af 4f       	sbci	r26, 0xFF	; 255
     f7a:	b1 e0       	ldi	r27, 0x01	; 1
     f7c:	3e d0       	rcall	.+124    	; 0xffa <__ultoa_invert+0x9c>
     f7e:	b4 e0       	ldi	r27, 0x04	; 4
     f80:	3c d0       	rcall	.+120    	; 0xffa <__ultoa_invert+0x9c>
     f82:	67 0f       	add	r22, r23
     f84:	78 1f       	adc	r23, r24
     f86:	89 1f       	adc	r24, r25
     f88:	9a 1f       	adc	r25, r26
     f8a:	a1 1d       	adc	r26, r1
     f8c:	68 0f       	add	r22, r24
     f8e:	79 1f       	adc	r23, r25
     f90:	8a 1f       	adc	r24, r26
     f92:	91 1d       	adc	r25, r1
     f94:	a1 1d       	adc	r26, r1
     f96:	6a 0f       	add	r22, r26
     f98:	71 1d       	adc	r23, r1
     f9a:	81 1d       	adc	r24, r1
     f9c:	91 1d       	adc	r25, r1
     f9e:	a1 1d       	adc	r26, r1
     fa0:	20 d0       	rcall	.+64     	; 0xfe2 <__ultoa_invert+0x84>
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <__ultoa_invert+0x48>
     fa4:	68 94       	set
     fa6:	3f 91       	pop	r19
     fa8:	2a e0       	ldi	r18, 0x0A	; 10
     faa:	26 9f       	mul	r18, r22
     fac:	11 24       	eor	r1, r1
     fae:	30 19       	sub	r19, r0
     fb0:	30 5d       	subi	r19, 0xD0	; 208
     fb2:	31 93       	st	Z+, r19
     fb4:	de f6       	brtc	.-74     	; 0xf6c <__ultoa_invert+0xe>
     fb6:	cf 01       	movw	r24, r30
     fb8:	08 95       	ret
     fba:	46 2f       	mov	r20, r22
     fbc:	47 70       	andi	r20, 0x07	; 7
     fbe:	40 5d       	subi	r20, 0xD0	; 208
     fc0:	41 93       	st	Z+, r20
     fc2:	b3 e0       	ldi	r27, 0x03	; 3
     fc4:	0f d0       	rcall	.+30     	; 0xfe4 <__ultoa_invert+0x86>
     fc6:	c9 f7       	brne	.-14     	; 0xfba <__ultoa_invert+0x5c>
     fc8:	f6 cf       	rjmp	.-20     	; 0xfb6 <__ultoa_invert+0x58>
     fca:	46 2f       	mov	r20, r22
     fcc:	4f 70       	andi	r20, 0x0F	; 15
     fce:	40 5d       	subi	r20, 0xD0	; 208
     fd0:	4a 33       	cpi	r20, 0x3A	; 58
     fd2:	18 f0       	brcs	.+6      	; 0xfda <__ultoa_invert+0x7c>
     fd4:	49 5d       	subi	r20, 0xD9	; 217
     fd6:	31 fd       	sbrc	r19, 1
     fd8:	40 52       	subi	r20, 0x20	; 32
     fda:	41 93       	st	Z+, r20
     fdc:	02 d0       	rcall	.+4      	; 0xfe2 <__ultoa_invert+0x84>
     fde:	a9 f7       	brne	.-22     	; 0xfca <__ultoa_invert+0x6c>
     fe0:	ea cf       	rjmp	.-44     	; 0xfb6 <__ultoa_invert+0x58>
     fe2:	b4 e0       	ldi	r27, 0x04	; 4
     fe4:	a6 95       	lsr	r26
     fe6:	97 95       	ror	r25
     fe8:	87 95       	ror	r24
     fea:	77 95       	ror	r23
     fec:	67 95       	ror	r22
     fee:	ba 95       	dec	r27
     ff0:	c9 f7       	brne	.-14     	; 0xfe4 <__ultoa_invert+0x86>
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	61 05       	cpc	r22, r1
     ff6:	71 05       	cpc	r23, r1
     ff8:	08 95       	ret
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	0a 2e       	mov	r0, r26
    1000:	06 94       	lsr	r0
    1002:	57 95       	ror	r21
    1004:	47 95       	ror	r20
    1006:	37 95       	ror	r19
    1008:	27 95       	ror	r18
    100a:	ba 95       	dec	r27
    100c:	c9 f7       	brne	.-14     	; 0x1000 <__ultoa_invert+0xa2>
    100e:	62 0f       	add	r22, r18
    1010:	73 1f       	adc	r23, r19
    1012:	84 1f       	adc	r24, r20
    1014:	95 1f       	adc	r25, r21
    1016:	a0 1d       	adc	r26, r0
    1018:	08 95       	ret

0000101a <__prologue_saves__>:
    101a:	2f 92       	push	r2
    101c:	3f 92       	push	r3
    101e:	4f 92       	push	r4
    1020:	5f 92       	push	r5
    1022:	6f 92       	push	r6
    1024:	7f 92       	push	r7
    1026:	8f 92       	push	r8
    1028:	9f 92       	push	r9
    102a:	af 92       	push	r10
    102c:	bf 92       	push	r11
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	ca 1b       	sub	r28, r26
    1044:	db 0b       	sbc	r29, r27
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	09 94       	ijmp

00001052 <__epilogue_restores__>:
    1052:	2a 88       	ldd	r2, Y+18	; 0x12
    1054:	39 88       	ldd	r3, Y+17	; 0x11
    1056:	48 88       	ldd	r4, Y+16	; 0x10
    1058:	5f 84       	ldd	r5, Y+15	; 0x0f
    105a:	6e 84       	ldd	r6, Y+14	; 0x0e
    105c:	7d 84       	ldd	r7, Y+13	; 0x0d
    105e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1060:	9b 84       	ldd	r9, Y+11	; 0x0b
    1062:	aa 84       	ldd	r10, Y+10	; 0x0a
    1064:	b9 84       	ldd	r11, Y+9	; 0x09
    1066:	c8 84       	ldd	r12, Y+8	; 0x08
    1068:	df 80       	ldd	r13, Y+7	; 0x07
    106a:	ee 80       	ldd	r14, Y+6	; 0x06
    106c:	fd 80       	ldd	r15, Y+5	; 0x05
    106e:	0c 81       	ldd	r16, Y+4	; 0x04
    1070:	1b 81       	ldd	r17, Y+3	; 0x03
    1072:	aa 81       	ldd	r26, Y+2	; 0x02
    1074:	b9 81       	ldd	r27, Y+1	; 0x01
    1076:	ce 0f       	add	r28, r30
    1078:	d1 1d       	adc	r29, r1
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	ed 01       	movw	r28, r26
    1086:	08 95       	ret

00001088 <_exit>:
    1088:	f8 94       	cli

0000108a <__stop_program>:
    108a:	ff cf       	rjmp	.-2      	; 0x108a <__stop_program>
